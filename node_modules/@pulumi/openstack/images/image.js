"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Image = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * ## Import
 *
 * Images can be imported using the `id`, e.g.
 *
 * ```sh
 *  $ pulumi import openstack:images/image:Image rancheros 89c60255-9bd6-460c-822a-e2b959ede9d2
 * ```
 */
class Image extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["checksum"] = state ? state.checksum : undefined;
            resourceInputs["containerFormat"] = state ? state.containerFormat : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["diskFormat"] = state ? state.diskFormat : undefined;
            resourceInputs["file"] = state ? state.file : undefined;
            resourceInputs["hidden"] = state ? state.hidden : undefined;
            resourceInputs["imageCachePath"] = state ? state.imageCachePath : undefined;
            resourceInputs["imageId"] = state ? state.imageId : undefined;
            resourceInputs["imageSourcePassword"] = state ? state.imageSourcePassword : undefined;
            resourceInputs["imageSourceUrl"] = state ? state.imageSourceUrl : undefined;
            resourceInputs["imageSourceUsername"] = state ? state.imageSourceUsername : undefined;
            resourceInputs["localFilePath"] = state ? state.localFilePath : undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
            resourceInputs["minDiskGb"] = state ? state.minDiskGb : undefined;
            resourceInputs["minRamMb"] = state ? state.minRamMb : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["owner"] = state ? state.owner : undefined;
            resourceInputs["properties"] = state ? state.properties : undefined;
            resourceInputs["protected"] = state ? state.protected : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["schema"] = state ? state.schema : undefined;
            resourceInputs["sizeBytes"] = state ? state.sizeBytes : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["updateAt"] = state ? state.updateAt : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
            resourceInputs["verifyChecksum"] = state ? state.verifyChecksum : undefined;
            resourceInputs["visibility"] = state ? state.visibility : undefined;
            resourceInputs["webDownload"] = state ? state.webDownload : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.containerFormat === undefined) && !opts.urn) {
                throw new Error("Missing required property 'containerFormat'");
            }
            if ((!args || args.diskFormat === undefined) && !opts.urn) {
                throw new Error("Missing required property 'diskFormat'");
            }
            resourceInputs["containerFormat"] = args ? args.containerFormat : undefined;
            resourceInputs["diskFormat"] = args ? args.diskFormat : undefined;
            resourceInputs["hidden"] = args ? args.hidden : undefined;
            resourceInputs["imageCachePath"] = args ? args.imageCachePath : undefined;
            resourceInputs["imageId"] = args ? args.imageId : undefined;
            resourceInputs["imageSourcePassword"] = args ? args.imageSourcePassword : undefined;
            resourceInputs["imageSourceUrl"] = args ? args.imageSourceUrl : undefined;
            resourceInputs["imageSourceUsername"] = args ? args.imageSourceUsername : undefined;
            resourceInputs["localFilePath"] = args ? args.localFilePath : undefined;
            resourceInputs["minDiskGb"] = args ? args.minDiskGb : undefined;
            resourceInputs["minRamMb"] = args ? args.minRamMb : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["properties"] = args ? args.properties : undefined;
            resourceInputs["protected"] = args ? args.protected : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["verifyChecksum"] = args ? args.verifyChecksum : undefined;
            resourceInputs["visibility"] = args ? args.visibility : undefined;
            resourceInputs["webDownload"] = args ? args.webDownload : undefined;
            resourceInputs["checksum"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["file"] = undefined /*out*/;
            resourceInputs["metadata"] = undefined /*out*/;
            resourceInputs["owner"] = undefined /*out*/;
            resourceInputs["schema"] = undefined /*out*/;
            resourceInputs["sizeBytes"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["updateAt"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Image.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing Image resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Image(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Image.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Image.__pulumiType;
    }
}
exports.Image = Image;
/** @internal */
Image.__pulumiType = 'openstack:images/image:Image';
//# sourceMappingURL=image.js.map