import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
/**
 * Manages a V1 stack resource within OpenStack.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as openstack from "@pulumi/openstack";
 *
 * const stack1 = new openstack.orchestration.StackV1("stack_1", {
 *     disableRollback: true,
 *     environmentOpts: {
 *         Bin: "\n",
 *     },
 *     parameters: {
 *         length: 4,
 *     },
 *     templateOpts: {
 *         Bin: `heat_template_version: 2013-05-23
 * parameters:
 *   length:
 *     type: number
 * resources:
 *   test_res:
 *     type: OS::Heat::TestResource
 *   random:
 *     type: OS::Heat::RandomString
 *     properties:
 *       length: {get_param: length}
 * `,
 *     },
 *     timeout: 30,
 * });
 * ```
 *
 * ## Import
 *
 * stacks can be imported using the `id`, e.g.
 *
 * ```sh
 *  $ pulumi import openstack:orchestration/stackV1:StackV1 stack_1 ea257959-eeb1-4c10-8d33-26f0409a755d
 * ```
 */
export declare class StackV1 extends pulumi.CustomResource {
    /**
     * Get an existing StackV1 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StackV1State, opts?: pulumi.CustomResourceOptions): StackV1;
    /**
     * Returns true if the given object is an instance of StackV1.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is StackV1;
    /**
     * A list of stack outputs.
     */
    readonly StackOutputs: pulumi.Output<outputs.orchestration.StackV1StackOutput[]>;
    /**
     * List of stack capabilities for stack.
     */
    readonly capabilities: pulumi.Output<string[]>;
    /**
     * The date and time when the resource was created. The date
     * and time stamp format is ISO 8601: CCYY-MM-DDThh:mm:ss±hh:mm
     * For example, 2015-08-27T09:49:58-05:00. The ±hh:mm value, if included,
     * is the time zone as an offset from UTC.
     */
    readonly creationTime: pulumi.Output<string>;
    /**
     * The description of the stack resource.
     */
    readonly description: pulumi.Output<string>;
    /**
     * Enables or disables deletion of all stack
     * resources when a stack creation fails. Default is true, meaning all
     * resources are not deleted when stack creation fails.
     */
    readonly disableRollback: pulumi.Output<boolean>;
    /**
     * Environment key/value pairs to associate with
     * the stack which contains details for the environment of the stack.
     * Allowed keys: Bin, URL, Files. Changing this updates the existing stack
     * Environment Opts.
     */
    readonly environmentOpts: pulumi.Output<{
        [key: string]: any;
    } | undefined>;
    /**
     * A unique name for the stack. It must start with an
     * alphabetic character. Changing this updates the stack's name.
     */
    readonly name: pulumi.Output<string>;
    /**
     * List of notification topics for stack.
     */
    readonly notificationTopics: pulumi.Output<string[]>;
    /**
     * User-defined key/value pairs as parameters to pass
     * to the template. Changing this updates the existing stack parameters.
     */
    readonly parameters: pulumi.Output<{
        [key: string]: any;
    } | undefined>;
    /**
     * The region in which to create the stack. If
     * omitted, the `region` argument of the provider is used. Changing this
     * creates a new stack.
     */
    readonly region: pulumi.Output<string>;
    /**
     * The status of the stack.
     */
    readonly status: pulumi.Output<string>;
    /**
     * The reason for the current status of the stack.
     */
    readonly statusReason: pulumi.Output<string>;
    /**
     * A list of tags to assosciate with the Stack
     */
    readonly tags: pulumi.Output<string[]>;
    /**
     * The description of the stack template.
     */
    readonly templateDescription: pulumi.Output<string>;
    /**
     * Template key/value pairs to associate with the
     * stack which contains either the template file or url.
     * Allowed keys: Bin, URL, Files. Changing this updates the existing stack
     * Template Opts.
     */
    readonly templateOpts: pulumi.Output<{
        [key: string]: any;
    }>;
    /**
     * The timeout for stack action in minutes.
     */
    readonly timeout: pulumi.Output<number>;
    /**
     * The date and time when the resource was updated. The date
     * and time stamp format is ISO 8601: CCYY-MM-DDThh:mm:ss±hh:mm
     * For example, 2015-08-27T09:49:58-05:00. The ±hh:mm value, if included,
     * is the time zone as an offset from UTC.
     */
    readonly updatedTime: pulumi.Output<string>;
    /**
     * Create a StackV1 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StackV1Args, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering StackV1 resources.
 */
export interface StackV1State {
    /**
     * A list of stack outputs.
     */
    StackOutputs?: pulumi.Input<pulumi.Input<inputs.orchestration.StackV1StackOutput>[]>;
    /**
     * List of stack capabilities for stack.
     */
    capabilities?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The date and time when the resource was created. The date
     * and time stamp format is ISO 8601: CCYY-MM-DDThh:mm:ss±hh:mm
     * For example, 2015-08-27T09:49:58-05:00. The ±hh:mm value, if included,
     * is the time zone as an offset from UTC.
     */
    creationTime?: pulumi.Input<string>;
    /**
     * The description of the stack resource.
     */
    description?: pulumi.Input<string>;
    /**
     * Enables or disables deletion of all stack
     * resources when a stack creation fails. Default is true, meaning all
     * resources are not deleted when stack creation fails.
     */
    disableRollback?: pulumi.Input<boolean>;
    /**
     * Environment key/value pairs to associate with
     * the stack which contains details for the environment of the stack.
     * Allowed keys: Bin, URL, Files. Changing this updates the existing stack
     * Environment Opts.
     */
    environmentOpts?: pulumi.Input<{
        [key: string]: any;
    }>;
    /**
     * A unique name for the stack. It must start with an
     * alphabetic character. Changing this updates the stack's name.
     */
    name?: pulumi.Input<string>;
    /**
     * List of notification topics for stack.
     */
    notificationTopics?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * User-defined key/value pairs as parameters to pass
     * to the template. Changing this updates the existing stack parameters.
     */
    parameters?: pulumi.Input<{
        [key: string]: any;
    }>;
    /**
     * The region in which to create the stack. If
     * omitted, the `region` argument of the provider is used. Changing this
     * creates a new stack.
     */
    region?: pulumi.Input<string>;
    /**
     * The status of the stack.
     */
    status?: pulumi.Input<string>;
    /**
     * The reason for the current status of the stack.
     */
    statusReason?: pulumi.Input<string>;
    /**
     * A list of tags to assosciate with the Stack
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The description of the stack template.
     */
    templateDescription?: pulumi.Input<string>;
    /**
     * Template key/value pairs to associate with the
     * stack which contains either the template file or url.
     * Allowed keys: Bin, URL, Files. Changing this updates the existing stack
     * Template Opts.
     */
    templateOpts?: pulumi.Input<{
        [key: string]: any;
    }>;
    /**
     * The timeout for stack action in minutes.
     */
    timeout?: pulumi.Input<number>;
    /**
     * The date and time when the resource was updated. The date
     * and time stamp format is ISO 8601: CCYY-MM-DDThh:mm:ss±hh:mm
     * For example, 2015-08-27T09:49:58-05:00. The ±hh:mm value, if included,
     * is the time zone as an offset from UTC.
     */
    updatedTime?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a StackV1 resource.
 */
export interface StackV1Args {
    /**
     * A list of stack outputs.
     */
    StackOutputs?: pulumi.Input<pulumi.Input<inputs.orchestration.StackV1StackOutput>[]>;
    /**
     * List of stack capabilities for stack.
     */
    capabilities?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The date and time when the resource was created. The date
     * and time stamp format is ISO 8601: CCYY-MM-DDThh:mm:ss±hh:mm
     * For example, 2015-08-27T09:49:58-05:00. The ±hh:mm value, if included,
     * is the time zone as an offset from UTC.
     */
    creationTime?: pulumi.Input<string>;
    /**
     * The description of the stack resource.
     */
    description?: pulumi.Input<string>;
    /**
     * Enables or disables deletion of all stack
     * resources when a stack creation fails. Default is true, meaning all
     * resources are not deleted when stack creation fails.
     */
    disableRollback?: pulumi.Input<boolean>;
    /**
     * Environment key/value pairs to associate with
     * the stack which contains details for the environment of the stack.
     * Allowed keys: Bin, URL, Files. Changing this updates the existing stack
     * Environment Opts.
     */
    environmentOpts?: pulumi.Input<{
        [key: string]: any;
    }>;
    /**
     * A unique name for the stack. It must start with an
     * alphabetic character. Changing this updates the stack's name.
     */
    name?: pulumi.Input<string>;
    /**
     * List of notification topics for stack.
     */
    notificationTopics?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * User-defined key/value pairs as parameters to pass
     * to the template. Changing this updates the existing stack parameters.
     */
    parameters?: pulumi.Input<{
        [key: string]: any;
    }>;
    /**
     * The region in which to create the stack. If
     * omitted, the `region` argument of the provider is used. Changing this
     * creates a new stack.
     */
    region?: pulumi.Input<string>;
    /**
     * The status of the stack.
     */
    status?: pulumi.Input<string>;
    /**
     * The reason for the current status of the stack.
     */
    statusReason?: pulumi.Input<string>;
    /**
     * A list of tags to assosciate with the Stack
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The description of the stack template.
     */
    templateDescription?: pulumi.Input<string>;
    /**
     * Template key/value pairs to associate with the
     * stack which contains either the template file or url.
     * Allowed keys: Bin, URL, Files. Changing this updates the existing stack
     * Template Opts.
     */
    templateOpts: pulumi.Input<{
        [key: string]: any;
    }>;
    /**
     * The timeout for stack action in minutes.
     */
    timeout?: pulumi.Input<number>;
    /**
     * The date and time when the resource was updated. The date
     * and time stamp format is ISO 8601: CCYY-MM-DDThh:mm:ss±hh:mm
     * For example, 2015-08-27T09:49:58-05:00. The ±hh:mm value, if included,
     * is the time zone as an offset from UTC.
     */
    updatedTime?: pulumi.Input<string>;
}
