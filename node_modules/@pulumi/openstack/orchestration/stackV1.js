"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.StackV1 = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a V1 stack resource within OpenStack.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as openstack from "@pulumi/openstack";
 *
 * const stack1 = new openstack.orchestration.StackV1("stack_1", {
 *     disableRollback: true,
 *     environmentOpts: {
 *         Bin: "\n",
 *     },
 *     parameters: {
 *         length: 4,
 *     },
 *     templateOpts: {
 *         Bin: `heat_template_version: 2013-05-23
 * parameters:
 *   length:
 *     type: number
 * resources:
 *   test_res:
 *     type: OS::Heat::TestResource
 *   random:
 *     type: OS::Heat::RandomString
 *     properties:
 *       length: {get_param: length}
 * `,
 *     },
 *     timeout: 30,
 * });
 * ```
 *
 * ## Import
 *
 * stacks can be imported using the `id`, e.g.
 *
 * ```sh
 *  $ pulumi import openstack:orchestration/stackV1:StackV1 stack_1 ea257959-eeb1-4c10-8d33-26f0409a755d
 * ```
 */
class StackV1 extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["StackOutputs"] = state ? state.StackOutputs : undefined;
            resourceInputs["capabilities"] = state ? state.capabilities : undefined;
            resourceInputs["creationTime"] = state ? state.creationTime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["disableRollback"] = state ? state.disableRollback : undefined;
            resourceInputs["environmentOpts"] = state ? state.environmentOpts : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notificationTopics"] = state ? state.notificationTopics : undefined;
            resourceInputs["parameters"] = state ? state.parameters : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["statusReason"] = state ? state.statusReason : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["templateDescription"] = state ? state.templateDescription : undefined;
            resourceInputs["templateOpts"] = state ? state.templateOpts : undefined;
            resourceInputs["timeout"] = state ? state.timeout : undefined;
            resourceInputs["updatedTime"] = state ? state.updatedTime : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.templateOpts === undefined) && !opts.urn) {
                throw new Error("Missing required property 'templateOpts'");
            }
            resourceInputs["StackOutputs"] = args ? args.StackOutputs : undefined;
            resourceInputs["capabilities"] = args ? args.capabilities : undefined;
            resourceInputs["creationTime"] = args ? args.creationTime : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["disableRollback"] = args ? args.disableRollback : undefined;
            resourceInputs["environmentOpts"] = args ? args.environmentOpts : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["notificationTopics"] = args ? args.notificationTopics : undefined;
            resourceInputs["parameters"] = args ? args.parameters : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["statusReason"] = args ? args.statusReason : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["templateDescription"] = args ? args.templateDescription : undefined;
            resourceInputs["templateOpts"] = args ? args.templateOpts : undefined;
            resourceInputs["timeout"] = args ? args.timeout : undefined;
            resourceInputs["updatedTime"] = args ? args.updatedTime : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(StackV1.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing StackV1 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new StackV1(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of StackV1.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StackV1.__pulumiType;
    }
}
exports.StackV1 = StackV1;
/** @internal */
StackV1.__pulumiType = 'openstack:orchestration/stackV1:StackV1';
//# sourceMappingURL=stackV1.js.map