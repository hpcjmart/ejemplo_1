"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserMembershipV3 = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a user membership to group V3 resource within OpenStack.
 *
 * > **Note:** You _must_ have admin privileges in your OpenStack cloud to use
 * this resource.
 *
 * ***
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as openstack from "@pulumi/openstack";
 *
 * const project1 = new openstack.identity.Project("project_1", {});
 * const user1 = new openstack.identity.User("user_1", {
 *     defaultProjectId: project1.id,
 * });
 * const group1 = new openstack.identity.GroupV3("group_1", {
 *     description: "group 1",
 * });
 * const role1 = new openstack.identity.Role("role_1", {});
 * const userMembership1 = new openstack.identity.UserMembershipV3("user_membership_1", {
 *     groupId: group1.id,
 *     userId: user1.id,
 * });
 * const roleAssignment1 = new openstack.identity.RoleAssignment("role_assignment_1", {
 *     groupId: group1.id,
 *     projectId: project1.id,
 *     roleId: role1.id,
 * });
 * ```
 *
 * ## Import
 *
 * This resource can be imported by specifying all two arguments, separated by a forward slash
 *
 * ```sh
 *  $ pulumi import openstack:identity/userMembershipV3:UserMembershipV3 user_membership_1 <user_id>/<group_id>
 * ```
 */
class UserMembershipV3 extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["groupId"] = state ? state.groupId : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["userId"] = state ? state.userId : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.groupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'groupId'");
            }
            if ((!args || args.userId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userId'");
            }
            resourceInputs["groupId"] = args ? args.groupId : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["userId"] = args ? args.userId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(UserMembershipV3.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing UserMembershipV3 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new UserMembershipV3(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of UserMembershipV3.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === UserMembershipV3.__pulumiType;
    }
}
exports.UserMembershipV3 = UserMembershipV3;
/** @internal */
UserMembershipV3.__pulumiType = 'openstack:identity/userMembershipV3:UserMembershipV3';
//# sourceMappingURL=userMembershipV3.js.map