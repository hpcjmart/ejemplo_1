import * as pulumi from "@pulumi/pulumi";
/**
 * Use this resource to configure a share network.
 *
 * A share network stores network information that share servers can use when
 * shares are created.
 *
 * ## Example Usage
 * ### Basic share network
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as openstack from "@pulumi/openstack";
 *
 * const network1 = new openstack.networking.Network("network_1", {
 *     adminStateUp: true,
 * });
 * const subnet1 = new openstack.networking.Subnet("subnet_1", {
 *     cidr: "192.168.199.0/24",
 *     ipVersion: 4,
 *     networkId: network1.id,
 * });
 * const sharenetwork1 = new openstack.sharedfilesystem.ShareNetwork("sharenetwork_1", {
 *     description: "test share network",
 *     neutronNetId: network1.id,
 *     neutronSubnetId: subnet1.id,
 * });
 * ```
 * ### Share network with associated security services
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as openstack from "@pulumi/openstack";
 *
 * const network1 = new openstack.networking.Network("network_1", {
 *     adminStateUp: true,
 * });
 * const subnet1 = new openstack.networking.Subnet("subnet_1", {
 *     cidr: "192.168.199.0/24",
 *     ipVersion: 4,
 *     networkId: network1.id,
 * });
 * const securityservice1 = new openstack.sharedfilesystem.SecurityService("securityservice_1", {
 *     description: "created by terraform",
 *     dnsIp: "192.168.199.10",
 *     domain: "example.com",
 *     ou: "CN=Computers,DC=example,DC=com",
 *     password: "s8cret",
 *     server: "192.168.199.10",
 *     type: "active_directory",
 *     user: "joinDomainUser",
 * });
 * const sharenetwork1 = new openstack.sharedfilesystem.ShareNetwork("sharenetwork_1", {
 *     description: "test share network with security services",
 *     neutronNetId: network1.id,
 *     neutronSubnetId: subnet1.id,
 *     securityServiceIds: [securityservice1.id],
 * });
 * ```
 *
 * ## Import
 *
 * This resource can be imported by specifying the ID of the share network
 *
 * ```sh
 *  $ pulumi import openstack:sharedfilesystem/shareNetwork:ShareNetwork sharenetwork_1 <id>
 * ```
 */
export declare class ShareNetwork extends pulumi.CustomResource {
    /**
     * Get an existing ShareNetwork resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ShareNetworkState, opts?: pulumi.CustomResourceOptions): ShareNetwork;
    /**
     * Returns true if the given object is an instance of ShareNetwork.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is ShareNetwork;
    /**
     * The share network CIDR.
     */
    readonly cidr: pulumi.Output<string>;
    /**
     * The human-readable description for the share network.
     * Changing this updates the description of the existing share network.
     */
    readonly description: pulumi.Output<string | undefined>;
    /**
     * The IP version of the share network. Can either be 4 or 6.
     */
    readonly ipVersion: pulumi.Output<number>;
    /**
     * The name for the share network. Changing this updates the name
     * of the existing share network.
     */
    readonly name: pulumi.Output<string>;
    /**
     * The share network type. Can either be VLAN, VXLAN, GRE, or flat.
     */
    readonly networkType: pulumi.Output<string>;
    /**
     * The UUID of a neutron network when setting up or updating
     * a share network. Changing this updates the existing share network if it's not used by
     * shares.
     */
    readonly neutronNetId: pulumi.Output<string>;
    /**
     * The UUID of the neutron subnet when setting up or
     * updating a share network. Changing this updates the existing share network if it's
     * not used by shares.
     */
    readonly neutronSubnetId: pulumi.Output<string>;
    /**
     * The owner of the Share Network.
     */
    readonly projectId: pulumi.Output<string>;
    /**
     * The region in which to obtain the V2 Shared File System client.
     * A Shared File System client is needed to create a share network. If omitted, the
     * `region` argument of the provider is used. Changing this creates a new
     * share network.
     */
    readonly region: pulumi.Output<string>;
    /**
     * The list of security service IDs to associate with
     * the share network. The security service must be specified by ID and not name.
     */
    readonly securityServiceIds: pulumi.Output<string[] | undefined>;
    /**
     * The share network segmentation ID.
     */
    readonly segmentationId: pulumi.Output<number>;
    /**
     * Create a ShareNetwork resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ShareNetworkArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering ShareNetwork resources.
 */
export interface ShareNetworkState {
    /**
     * The share network CIDR.
     */
    cidr?: pulumi.Input<string>;
    /**
     * The human-readable description for the share network.
     * Changing this updates the description of the existing share network.
     */
    description?: pulumi.Input<string>;
    /**
     * The IP version of the share network. Can either be 4 or 6.
     */
    ipVersion?: pulumi.Input<number>;
    /**
     * The name for the share network. Changing this updates the name
     * of the existing share network.
     */
    name?: pulumi.Input<string>;
    /**
     * The share network type. Can either be VLAN, VXLAN, GRE, or flat.
     */
    networkType?: pulumi.Input<string>;
    /**
     * The UUID of a neutron network when setting up or updating
     * a share network. Changing this updates the existing share network if it's not used by
     * shares.
     */
    neutronNetId?: pulumi.Input<string>;
    /**
     * The UUID of the neutron subnet when setting up or
     * updating a share network. Changing this updates the existing share network if it's
     * not used by shares.
     */
    neutronSubnetId?: pulumi.Input<string>;
    /**
     * The owner of the Share Network.
     */
    projectId?: pulumi.Input<string>;
    /**
     * The region in which to obtain the V2 Shared File System client.
     * A Shared File System client is needed to create a share network. If omitted, the
     * `region` argument of the provider is used. Changing this creates a new
     * share network.
     */
    region?: pulumi.Input<string>;
    /**
     * The list of security service IDs to associate with
     * the share network. The security service must be specified by ID and not name.
     */
    securityServiceIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The share network segmentation ID.
     */
    segmentationId?: pulumi.Input<number>;
}
/**
 * The set of arguments for constructing a ShareNetwork resource.
 */
export interface ShareNetworkArgs {
    /**
     * The human-readable description for the share network.
     * Changing this updates the description of the existing share network.
     */
    description?: pulumi.Input<string>;
    /**
     * The name for the share network. Changing this updates the name
     * of the existing share network.
     */
    name?: pulumi.Input<string>;
    /**
     * The UUID of a neutron network when setting up or updating
     * a share network. Changing this updates the existing share network if it's not used by
     * shares.
     */
    neutronNetId: pulumi.Input<string>;
    /**
     * The UUID of the neutron subnet when setting up or
     * updating a share network. Changing this updates the existing share network if it's
     * not used by shares.
     */
    neutronSubnetId: pulumi.Input<string>;
    /**
     * The region in which to obtain the V2 Shared File System client.
     * A Shared File System client is needed to create a share network. If omitted, the
     * `region` argument of the provider is used. Changing this creates a new
     * share network.
     */
    region?: pulumi.Input<string>;
    /**
     * The list of security service IDs to associate with
     * the share network. The security service must be specified by ID and not name.
     */
    securityServiceIds?: pulumi.Input<pulumi.Input<string>[]>;
}
