"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.SecurityService = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Use this resource to configure a security service.
 *
 * > **Note:** All arguments including the security service password will be
 * stored in the raw state as plain-text. [Read more about sensitive data in
 * state](https://www.terraform.io/docs/state/sensitive-data.html).
 *
 * A security service stores configuration information for clients for
 * authentication and authorization (AuthN/AuthZ). For example, a share server
 * will be the client for an existing service such as LDAP, Kerberos, or
 * Microsoft Active Directory.
 *
 * Minimum supported Manila microversion is 2.7.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as openstack from "@pulumi/openstack";
 *
 * const securityservice1 = new openstack.sharedfilesystem.SecurityService("securityservice_1", {
 *     description: "created by terraform",
 *     dnsIp: "192.168.199.10",
 *     domain: "example.com",
 *     ou: "CN=Computers,DC=example,DC=com",
 *     password: "s8cret",
 *     server: "192.168.199.10",
 *     type: "active_directory",
 *     user: "joinDomainUser",
 * });
 * ```
 *
 * ## Import
 *
 * This resource can be imported by specifying the ID of the security service
 *
 * ```sh
 *  $ pulumi import openstack:sharedfilesystem/securityService:SecurityService securityservice_1 <id>
 * ```
 */
class SecurityService extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["dnsIp"] = state ? state.dnsIp : undefined;
            resourceInputs["domain"] = state ? state.domain : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["ou"] = state ? state.ou : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["server"] = state ? state.server : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["user"] = state ? state.user : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["dnsIp"] = args ? args.dnsIp : undefined;
            resourceInputs["domain"] = args ? args.domain : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["ou"] = args ? args.ou : undefined;
            resourceInputs["password"] = args ? args.password : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["server"] = args ? args.server : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["user"] = args ? args.user : undefined;
            resourceInputs["projectId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SecurityService.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing SecurityService resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new SecurityService(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of SecurityService.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SecurityService.__pulumiType;
    }
}
exports.SecurityService = SecurityService;
/** @internal */
SecurityService.__pulumiType = 'openstack:sharedfilesystem/securityService:SecurityService';
//# sourceMappingURL=securityService.js.map