import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
/**
 * Manages a V1 Barbican order resource within OpenStack.
 *
 * ## Example Usage
 * ### Symmetric key order
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as openstack from "@pulumi/openstack";
 *
 * const order1 = new openstack.keymanager.OrderV1("order_1", {
 *     meta: {
 *         algorithm: "aes",
 *         bitLength: 256,
 *         mode: "cbc",
 *         name: "mysecret",
 *     },
 *     type: "key",
 * });
 * ```
 * ### Asymmetric key pair order
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as openstack from "@pulumi/openstack";
 *
 * const order1 = new openstack.keymanager.OrderV1("order_1", {
 *     meta: {
 *         algorithm: "rsa",
 *         bitLength: 4096,
 *         name: "mysecret",
 *     },
 *     type: "asymmetric",
 * });
 * ```
 *
 * ## Import
 *
 * Orders can be imported using the order id (the last part of the order reference), e.g.
 *
 * ```sh
 *  $ pulumi import openstack:keymanager/orderV1:OrderV1 order_1 0c6cd26a-c012-4d7b-8034-057c0f1c2953
 * ```
 */
export declare class OrderV1 extends pulumi.CustomResource {
    /**
     * Get an existing OrderV1 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OrderV1State, opts?: pulumi.CustomResourceOptions): OrderV1;
    /**
     * Returns true if the given object is an instance of OrderV1.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is OrderV1;
    /**
     * The container reference / where to find the container.
     */
    readonly containerRef: pulumi.Output<string>;
    /**
     * The date the order was created.
     */
    readonly created: pulumi.Output<string>;
    /**
     * The creator of the order.
     */
    readonly creatorId: pulumi.Output<string>;
    /**
     * Dictionary containing the order metadata used to generate the order. The structure is described below.
     */
    readonly meta: pulumi.Output<outputs.keymanager.OrderV1Meta>;
    /**
     * The order reference / where to find the order.
     */
    readonly orderRef: pulumi.Output<string>;
    /**
     * The region in which to obtain the V1 KeyManager client.
     * A KeyManager client is needed to create a order. If omitted, the
     * `region` argument of the provider is used. Changing this creates a new
     * V1 order.
     */
    readonly region: pulumi.Output<string>;
    /**
     * The secret reference / where to find the secret.
     */
    readonly secretRef: pulumi.Output<string>;
    /**
     * The status of the order.
     */
    readonly status: pulumi.Output<string>;
    /**
     * The sub status of the order.
     */
    readonly subStatus: pulumi.Output<string>;
    /**
     * The sub status message of the order.
     */
    readonly subStatusMessage: pulumi.Output<string>;
    /**
     * The type of key to be generated. Must be one of `asymmetric`, `key`.
     */
    readonly type: pulumi.Output<string>;
    /**
     * The date the order was last updated.
     */
    readonly updated: pulumi.Output<string>;
    /**
     * Create a OrderV1 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OrderV1Args, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering OrderV1 resources.
 */
export interface OrderV1State {
    /**
     * The container reference / where to find the container.
     */
    containerRef?: pulumi.Input<string>;
    /**
     * The date the order was created.
     */
    created?: pulumi.Input<string>;
    /**
     * The creator of the order.
     */
    creatorId?: pulumi.Input<string>;
    /**
     * Dictionary containing the order metadata used to generate the order. The structure is described below.
     */
    meta?: pulumi.Input<inputs.keymanager.OrderV1Meta>;
    /**
     * The order reference / where to find the order.
     */
    orderRef?: pulumi.Input<string>;
    /**
     * The region in which to obtain the V1 KeyManager client.
     * A KeyManager client is needed to create a order. If omitted, the
     * `region` argument of the provider is used. Changing this creates a new
     * V1 order.
     */
    region?: pulumi.Input<string>;
    /**
     * The secret reference / where to find the secret.
     */
    secretRef?: pulumi.Input<string>;
    /**
     * The status of the order.
     */
    status?: pulumi.Input<string>;
    /**
     * The sub status of the order.
     */
    subStatus?: pulumi.Input<string>;
    /**
     * The sub status message of the order.
     */
    subStatusMessage?: pulumi.Input<string>;
    /**
     * The type of key to be generated. Must be one of `asymmetric`, `key`.
     */
    type?: pulumi.Input<string>;
    /**
     * The date the order was last updated.
     */
    updated?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a OrderV1 resource.
 */
export interface OrderV1Args {
    /**
     * Dictionary containing the order metadata used to generate the order. The structure is described below.
     */
    meta: pulumi.Input<inputs.keymanager.OrderV1Meta>;
    /**
     * The region in which to obtain the V1 KeyManager client.
     * A KeyManager client is needed to create a order. If omitted, the
     * `region` argument of the provider is used. Changing this creates a new
     * V1 order.
     */
    region?: pulumi.Input<string>;
    /**
     * The type of key to be generated. Must be one of `asymmetric`, `key`.
     */
    type: pulumi.Input<string>;
}
