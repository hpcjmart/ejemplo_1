"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.SubnetPool = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a V2 Neutron subnetpool resource within OpenStack.
 *
 * ## Example Usage
 * ### Create a Subnet Pool
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as openstack from "@pulumi/openstack";
 *
 * const subnetpool1 = new openstack.networking.SubnetPool("subnetpool_1", {
 *     ipVersion: 6,
 *     prefixes: [
 *         "fdf7:b13d:dead:beef::/64",
 *         "fd65:86cc:a334:39b7::/64",
 *     ],
 * });
 * ```
 * ### Create a Subnet from a Subnet Pool
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as openstack from "@pulumi/openstack";
 *
 * const network1 = new openstack.networking.Network("network_1", {
 *     adminStateUp: true,
 * });
 * const subnetpool1 = new openstack.networking.SubnetPool("subnetpool_1", {
 *     prefixes: ["10.11.12.0/24"],
 * });
 * const subnet1 = new openstack.networking.Subnet("subnet_1", {
 *     cidr: "10.11.12.0/25",
 *     networkId: network1.id,
 *     subnetpoolId: subnetpool1.id,
 * });
 * ```
 *
 * ## Import
 *
 * Subnetpools can be imported using the `id`, e.g.
 *
 * ```sh
 *  $ pulumi import openstack:networking/subnetPool:SubnetPool subnetpool_1 832cb7f3-59fe-40cf-8f64-8350ffc03272
 * ```
 */
class SubnetPool extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["addressScopeId"] = state ? state.addressScopeId : undefined;
            resourceInputs["allTags"] = state ? state.allTags : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["defaultPrefixlen"] = state ? state.defaultPrefixlen : undefined;
            resourceInputs["defaultQuota"] = state ? state.defaultQuota : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["ipVersion"] = state ? state.ipVersion : undefined;
            resourceInputs["isDefault"] = state ? state.isDefault : undefined;
            resourceInputs["maxPrefixlen"] = state ? state.maxPrefixlen : undefined;
            resourceInputs["minPrefixlen"] = state ? state.minPrefixlen : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["prefixes"] = state ? state.prefixes : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["revisionNumber"] = state ? state.revisionNumber : undefined;
            resourceInputs["shared"] = state ? state.shared : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
            resourceInputs["valueSpecs"] = state ? state.valueSpecs : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.prefixes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'prefixes'");
            }
            resourceInputs["addressScopeId"] = args ? args.addressScopeId : undefined;
            resourceInputs["defaultPrefixlen"] = args ? args.defaultPrefixlen : undefined;
            resourceInputs["defaultQuota"] = args ? args.defaultQuota : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["ipVersion"] = args ? args.ipVersion : undefined;
            resourceInputs["isDefault"] = args ? args.isDefault : undefined;
            resourceInputs["maxPrefixlen"] = args ? args.maxPrefixlen : undefined;
            resourceInputs["minPrefixlen"] = args ? args.minPrefixlen : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["prefixes"] = args ? args.prefixes : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["shared"] = args ? args.shared : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["valueSpecs"] = args ? args.valueSpecs : undefined;
            resourceInputs["allTags"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["revisionNumber"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SubnetPool.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing SubnetPool resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new SubnetPool(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of SubnetPool.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SubnetPool.__pulumiType;
    }
}
exports.SubnetPool = SubnetPool;
/** @internal */
SubnetPool.__pulumiType = 'openstack:networking/subnetPool:SubnetPool';
//# sourceMappingURL=subnetPool.js.map