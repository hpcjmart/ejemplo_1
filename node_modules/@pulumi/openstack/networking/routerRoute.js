"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.RouterRoute = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Creates a routing entry on a OpenStack V2 router.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as openstack from "@pulumi/openstack";
 *
 * const router1 = new openstack.networking.Router("router_1", {
 *     adminStateUp: true,
 * });
 * const network1 = new openstack.networking.Network("network_1", {
 *     adminStateUp: true,
 * });
 * const subnet1 = new openstack.networking.Subnet("subnet_1", {
 *     cidr: "192.168.199.0/24",
 *     ipVersion: 4,
 *     networkId: network1.id,
 * });
 * const int1 = new openstack.networking.RouterInterface("int_1", {
 *     routerId: router1.id,
 *     subnetId: subnet1.id,
 * });
 * const routerRoute1 = new openstack.networking.RouterRoute("router_route_1", {
 *     destinationCidr: "10.0.1.0/24",
 *     nextHop: "192.168.199.254",
 *     routerId: router1.id,
 * }, { dependsOn: [int1] });
 * ```
 * ## Notes
 *
 * The `nextHop` IP address must be directly reachable from the router at the ``openstack.networking.RouterRoute``
 * resource creation time.  You can ensure that by explicitly specifying a dependency on the ``openstack.networking.RouterInterface``
 * resource that connects the next hop to the router, as in the example above.
 *
 * ## Import
 *
 * Routing entries can be imported using a combined ID using the following format``<router_id>-route-<destination_cidr>-<next_hop>``
 *
 * ```sh
 *  $ pulumi import openstack:networking/routerRoute:RouterRoute router_route_1 686fe248-386c-4f70-9f6c-281607dad079-route-10.0.1.0/24-192.168.199.25
 * ```
 */
class RouterRoute extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["destinationCidr"] = state ? state.destinationCidr : undefined;
            resourceInputs["nextHop"] = state ? state.nextHop : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["routerId"] = state ? state.routerId : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.destinationCidr === undefined) && !opts.urn) {
                throw new Error("Missing required property 'destinationCidr'");
            }
            if ((!args || args.nextHop === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nextHop'");
            }
            if ((!args || args.routerId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'routerId'");
            }
            resourceInputs["destinationCidr"] = args ? args.destinationCidr : undefined;
            resourceInputs["nextHop"] = args ? args.nextHop : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["routerId"] = args ? args.routerId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RouterRoute.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing RouterRoute resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new RouterRoute(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of RouterRoute.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RouterRoute.__pulumiType;
    }
}
exports.RouterRoute = RouterRoute;
/** @internal */
RouterRoute.__pulumiType = 'openstack:networking/routerRoute:RouterRoute';
//# sourceMappingURL=routerRoute.js.map