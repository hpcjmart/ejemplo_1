"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
// Export members:
__exportStar(require("./addressScope"), exports);
__exportStar(require("./floatingIp"), exports);
__exportStar(require("./floatingIpAssociate"), exports);
__exportStar(require("./getAddressScope"), exports);
__exportStar(require("./getFloatingIp"), exports);
__exportStar(require("./getNetwork"), exports);
__exportStar(require("./getPort"), exports);
__exportStar(require("./getPortIds"), exports);
__exportStar(require("./getQosBandwidthLimitRule"), exports);
__exportStar(require("./getQosDscpMarkingRule"), exports);
__exportStar(require("./getQosMinimumBandwidthRule"), exports);
__exportStar(require("./getQosPolicy"), exports);
__exportStar(require("./getQuotaV2"), exports);
__exportStar(require("./getRouter"), exports);
__exportStar(require("./getSecGroup"), exports);
__exportStar(require("./getSubnet"), exports);
__exportStar(require("./getSubnetIdsV2"), exports);
__exportStar(require("./getSubnetPool"), exports);
__exportStar(require("./getTrunk"), exports);
__exportStar(require("./network"), exports);
__exportStar(require("./port"), exports);
__exportStar(require("./portForwardingV2"), exports);
__exportStar(require("./portSecGroupAssociate"), exports);
__exportStar(require("./qosBandwidthLimitRule"), exports);
__exportStar(require("./qosDscpMarkingRule"), exports);
__exportStar(require("./qosMinimumBandwidthRule"), exports);
__exportStar(require("./qosPolicy"), exports);
__exportStar(require("./quotaV2"), exports);
__exportStar(require("./rbacPolicyV2"), exports);
__exportStar(require("./router"), exports);
__exportStar(require("./routerInterface"), exports);
__exportStar(require("./routerRoute"), exports);
__exportStar(require("./secGroup"), exports);
__exportStar(require("./secGroupRule"), exports);
__exportStar(require("./subnet"), exports);
__exportStar(require("./subnetPool"), exports);
__exportStar(require("./subnetRoute"), exports);
__exportStar(require("./trunk"), exports);
// Import resources to register:
const addressScope_1 = require("./addressScope");
const floatingIp_1 = require("./floatingIp");
const floatingIpAssociate_1 = require("./floatingIpAssociate");
const network_1 = require("./network");
const port_1 = require("./port");
const portForwardingV2_1 = require("./portForwardingV2");
const portSecGroupAssociate_1 = require("./portSecGroupAssociate");
const qosBandwidthLimitRule_1 = require("./qosBandwidthLimitRule");
const qosDscpMarkingRule_1 = require("./qosDscpMarkingRule");
const qosMinimumBandwidthRule_1 = require("./qosMinimumBandwidthRule");
const qosPolicy_1 = require("./qosPolicy");
const quotaV2_1 = require("./quotaV2");
const rbacPolicyV2_1 = require("./rbacPolicyV2");
const router_1 = require("./router");
const routerInterface_1 = require("./routerInterface");
const routerRoute_1 = require("./routerRoute");
const secGroup_1 = require("./secGroup");
const secGroupRule_1 = require("./secGroupRule");
const subnet_1 = require("./subnet");
const subnetPool_1 = require("./subnetPool");
const subnetRoute_1 = require("./subnetRoute");
const trunk_1 = require("./trunk");
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "openstack:networking/addressScope:AddressScope":
                return new addressScope_1.AddressScope(name, undefined, { urn });
            case "openstack:networking/floatingIp:FloatingIp":
                return new floatingIp_1.FloatingIp(name, undefined, { urn });
            case "openstack:networking/floatingIpAssociate:FloatingIpAssociate":
                return new floatingIpAssociate_1.FloatingIpAssociate(name, undefined, { urn });
            case "openstack:networking/network:Network":
                return new network_1.Network(name, undefined, { urn });
            case "openstack:networking/port:Port":
                return new port_1.Port(name, undefined, { urn });
            case "openstack:networking/portForwardingV2:PortForwardingV2":
                return new portForwardingV2_1.PortForwardingV2(name, undefined, { urn });
            case "openstack:networking/portSecGroupAssociate:PortSecGroupAssociate":
                return new portSecGroupAssociate_1.PortSecGroupAssociate(name, undefined, { urn });
            case "openstack:networking/qosBandwidthLimitRule:QosBandwidthLimitRule":
                return new qosBandwidthLimitRule_1.QosBandwidthLimitRule(name, undefined, { urn });
            case "openstack:networking/qosDscpMarkingRule:QosDscpMarkingRule":
                return new qosDscpMarkingRule_1.QosDscpMarkingRule(name, undefined, { urn });
            case "openstack:networking/qosMinimumBandwidthRule:QosMinimumBandwidthRule":
                return new qosMinimumBandwidthRule_1.QosMinimumBandwidthRule(name, undefined, { urn });
            case "openstack:networking/qosPolicy:QosPolicy":
                return new qosPolicy_1.QosPolicy(name, undefined, { urn });
            case "openstack:networking/quotaV2:QuotaV2":
                return new quotaV2_1.QuotaV2(name, undefined, { urn });
            case "openstack:networking/rbacPolicyV2:RbacPolicyV2":
                return new rbacPolicyV2_1.RbacPolicyV2(name, undefined, { urn });
            case "openstack:networking/router:Router":
                return new router_1.Router(name, undefined, { urn });
            case "openstack:networking/routerInterface:RouterInterface":
                return new routerInterface_1.RouterInterface(name, undefined, { urn });
            case "openstack:networking/routerRoute:RouterRoute":
                return new routerRoute_1.RouterRoute(name, undefined, { urn });
            case "openstack:networking/secGroup:SecGroup":
                return new secGroup_1.SecGroup(name, undefined, { urn });
            case "openstack:networking/secGroupRule:SecGroupRule":
                return new secGroupRule_1.SecGroupRule(name, undefined, { urn });
            case "openstack:networking/subnet:Subnet":
                return new subnet_1.Subnet(name, undefined, { urn });
            case "openstack:networking/subnetPool:SubnetPool":
                return new subnetPool_1.SubnetPool(name, undefined, { urn });
            case "openstack:networking/subnetRoute:SubnetRoute":
                return new subnetRoute_1.SubnetRoute(name, undefined, { urn });
            case "openstack:networking/trunk:Trunk":
                return new trunk_1.Trunk(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("openstack", "networking/addressScope", _module);
pulumi.runtime.registerResourceModule("openstack", "networking/floatingIp", _module);
pulumi.runtime.registerResourceModule("openstack", "networking/floatingIpAssociate", _module);
pulumi.runtime.registerResourceModule("openstack", "networking/network", _module);
pulumi.runtime.registerResourceModule("openstack", "networking/port", _module);
pulumi.runtime.registerResourceModule("openstack", "networking/portForwardingV2", _module);
pulumi.runtime.registerResourceModule("openstack", "networking/portSecGroupAssociate", _module);
pulumi.runtime.registerResourceModule("openstack", "networking/qosBandwidthLimitRule", _module);
pulumi.runtime.registerResourceModule("openstack", "networking/qosDscpMarkingRule", _module);
pulumi.runtime.registerResourceModule("openstack", "networking/qosMinimumBandwidthRule", _module);
pulumi.runtime.registerResourceModule("openstack", "networking/qosPolicy", _module);
pulumi.runtime.registerResourceModule("openstack", "networking/quotaV2", _module);
pulumi.runtime.registerResourceModule("openstack", "networking/rbacPolicyV2", _module);
pulumi.runtime.registerResourceModule("openstack", "networking/router", _module);
pulumi.runtime.registerResourceModule("openstack", "networking/routerInterface", _module);
pulumi.runtime.registerResourceModule("openstack", "networking/routerRoute", _module);
pulumi.runtime.registerResourceModule("openstack", "networking/secGroup", _module);
pulumi.runtime.registerResourceModule("openstack", "networking/secGroupRule", _module);
pulumi.runtime.registerResourceModule("openstack", "networking/subnet", _module);
pulumi.runtime.registerResourceModule("openstack", "networking/subnetPool", _module);
pulumi.runtime.registerResourceModule("openstack", "networking/subnetRoute", _module);
pulumi.runtime.registerResourceModule("openstack", "networking/trunk", _module);
//# sourceMappingURL=index.js.map