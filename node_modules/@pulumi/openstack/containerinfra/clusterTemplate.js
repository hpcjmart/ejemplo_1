"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ClusterTemplate = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a V1 Magnum cluster template resource within OpenStack.
 *
 * ## Example Usage
 * ### Create a Cluster template
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as openstack from "@pulumi/openstack";
 *
 * const clustertemplate1 = new openstack.containerinfra.ClusterTemplate("clustertemplate_1", {
 *     coe: "kubernetes",
 *     dnsNameserver: "1.1.1.1",
 *     dockerStorageDriver: "devicemapper",
 *     dockerVolumeSize: 10,
 *     flavor: "m1.small",
 *     floatingIpEnabled: false,
 *     image: "Fedora-Atomic-27",
 *     labels: {
 *         influx_grafana_dashboard_enabled: "true",
 *         kube_dashboard_enabled: "true",
 *         kube_tag: "1.11.1",
 *         prometheus_monitoring: "true",
 *     },
 *     masterFlavor: "m1.medium",
 *     masterLbEnabled: true,
 *     networkDriver: "flannel",
 *     serverType: "vm",
 *     volumeDriver: "cinder",
 * });
 * ```
 * ## Attributes reference
 *
 * The following attributes are exported:
 *
 * * `region` - See Argument Reference above.
 * * `name` - See Argument Reference above.
 * * `projectId` - See Argument Reference above.
 * * `createdAt` - The time at which cluster template was created.
 * * `updatedAt` - The time at which cluster template was created.
 * * `apiserverPort` - See Argument Reference above.
 * * `coe` - See Argument Reference above.
 * * `clusterDistro` - See Argument Reference above.
 * * `dnsNameserver` - See Argument Reference above.
 * * `dockerStorageDriver` - See Argument Reference above.
 * * `dockerVolumeSize` - See Argument Reference above.
 * * `externalNetworkId` - See Argument Reference above.
 * * `fixedNetwork` - See Argument Reference above.
 * * `fixedSubnet` - See Argument Reference above.
 * * `flavor` - See Argument Reference above.
 * * `masterFlavor` - See Argument Reference above.
 * * `floatingIpEnabled` - See Argument Reference above.
 * * `httpProxy` - See Argument Reference above.
 * * `httpsProxy` - See Argument Reference above.
 * * `image` - See Argument Reference above.
 * * `insecureRegistry` - See Argument Reference above.
 * * `keypairId` - See Argument Reference above.
 * * `labels` - See Argument Reference above.
 * * `links` - A list containing associated cluster template links.
 * * `masterLbEnabled` - See Argument Reference above.
 * * `networkDriver` - See Argument Reference above.
 * * `noProxy` - See Argument Reference above.
 * * `public` - See Argument Reference above.
 * * `registryEnabled` - See Argument Reference above.
 * * `serverType` - See Argument Reference above.
 * * `tlsDisabled` - See Argument Reference above.
 * * `volumeDriver` - See Argument Reference above.
 *
 * ## Import
 *
 * Cluster templates can be imported using the `id`, e.g.
 *
 * ```sh
 *  $ pulumi import openstack:containerinfra/clusterTemplate:ClusterTemplate clustertemplate_1 b9a45c5c-cd03-4958-82aa-b80bf93cb922
 * ```
 */
class ClusterTemplate extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["apiserverPort"] = state ? state.apiserverPort : undefined;
            resourceInputs["clusterDistro"] = state ? state.clusterDistro : undefined;
            resourceInputs["coe"] = state ? state.coe : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["dnsNameserver"] = state ? state.dnsNameserver : undefined;
            resourceInputs["dockerStorageDriver"] = state ? state.dockerStorageDriver : undefined;
            resourceInputs["dockerVolumeSize"] = state ? state.dockerVolumeSize : undefined;
            resourceInputs["externalNetworkId"] = state ? state.externalNetworkId : undefined;
            resourceInputs["fixedNetwork"] = state ? state.fixedNetwork : undefined;
            resourceInputs["fixedSubnet"] = state ? state.fixedSubnet : undefined;
            resourceInputs["flavor"] = state ? state.flavor : undefined;
            resourceInputs["floatingIpEnabled"] = state ? state.floatingIpEnabled : undefined;
            resourceInputs["httpProxy"] = state ? state.httpProxy : undefined;
            resourceInputs["httpsProxy"] = state ? state.httpsProxy : undefined;
            resourceInputs["image"] = state ? state.image : undefined;
            resourceInputs["insecureRegistry"] = state ? state.insecureRegistry : undefined;
            resourceInputs["keypairId"] = state ? state.keypairId : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["masterFlavor"] = state ? state.masterFlavor : undefined;
            resourceInputs["masterLbEnabled"] = state ? state.masterLbEnabled : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkDriver"] = state ? state.networkDriver : undefined;
            resourceInputs["noProxy"] = state ? state.noProxy : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["public"] = state ? state.public : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["registryEnabled"] = state ? state.registryEnabled : undefined;
            resourceInputs["serverType"] = state ? state.serverType : undefined;
            resourceInputs["tlsDisabled"] = state ? state.tlsDisabled : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
            resourceInputs["userId"] = state ? state.userId : undefined;
            resourceInputs["volumeDriver"] = state ? state.volumeDriver : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.coe === undefined) && !opts.urn) {
                throw new Error("Missing required property 'coe'");
            }
            if ((!args || args.image === undefined) && !opts.urn) {
                throw new Error("Missing required property 'image'");
            }
            resourceInputs["apiserverPort"] = args ? args.apiserverPort : undefined;
            resourceInputs["clusterDistro"] = args ? args.clusterDistro : undefined;
            resourceInputs["coe"] = args ? args.coe : undefined;
            resourceInputs["dnsNameserver"] = args ? args.dnsNameserver : undefined;
            resourceInputs["dockerStorageDriver"] = args ? args.dockerStorageDriver : undefined;
            resourceInputs["dockerVolumeSize"] = args ? args.dockerVolumeSize : undefined;
            resourceInputs["externalNetworkId"] = args ? args.externalNetworkId : undefined;
            resourceInputs["fixedNetwork"] = args ? args.fixedNetwork : undefined;
            resourceInputs["fixedSubnet"] = args ? args.fixedSubnet : undefined;
            resourceInputs["flavor"] = args ? args.flavor : undefined;
            resourceInputs["floatingIpEnabled"] = args ? args.floatingIpEnabled : undefined;
            resourceInputs["httpProxy"] = args ? args.httpProxy : undefined;
            resourceInputs["httpsProxy"] = args ? args.httpsProxy : undefined;
            resourceInputs["image"] = args ? args.image : undefined;
            resourceInputs["insecureRegistry"] = args ? args.insecureRegistry : undefined;
            resourceInputs["keypairId"] = args ? args.keypairId : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["masterFlavor"] = args ? args.masterFlavor : undefined;
            resourceInputs["masterLbEnabled"] = args ? args.masterLbEnabled : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkDriver"] = args ? args.networkDriver : undefined;
            resourceInputs["noProxy"] = args ? args.noProxy : undefined;
            resourceInputs["public"] = args ? args.public : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["registryEnabled"] = args ? args.registryEnabled : undefined;
            resourceInputs["serverType"] = args ? args.serverType : undefined;
            resourceInputs["tlsDisabled"] = args ? args.tlsDisabled : undefined;
            resourceInputs["volumeDriver"] = args ? args.volumeDriver : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["projectId"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
            resourceInputs["userId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ClusterTemplate.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing ClusterTemplate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new ClusterTemplate(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of ClusterTemplate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ClusterTemplate.__pulumiType;
    }
}
exports.ClusterTemplate = ClusterTemplate;
/** @internal */
ClusterTemplate.__pulumiType = 'openstack:containerinfra/clusterTemplate:ClusterTemplate';
//# sourceMappingURL=clusterTemplate.js.map