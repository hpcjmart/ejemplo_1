"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Cluster = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * ## Import
 *
 * Clusters can be imported using the `id`, e.g.
 *
 * ```sh
 *  $ pulumi import openstack:containerinfra/cluster:Cluster cluster_1 ce0f9463-dd25-474b-9fe8-94de63e5e42b
 * ```
 */
class Cluster extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["apiAddress"] = state ? state.apiAddress : undefined;
            resourceInputs["clusterTemplateId"] = state ? state.clusterTemplateId : undefined;
            resourceInputs["coeVersion"] = state ? state.coeVersion : undefined;
            resourceInputs["containerVersion"] = state ? state.containerVersion : undefined;
            resourceInputs["createTimeout"] = state ? state.createTimeout : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["discoveryUrl"] = state ? state.discoveryUrl : undefined;
            resourceInputs["dockerVolumeSize"] = state ? state.dockerVolumeSize : undefined;
            resourceInputs["fixedNetwork"] = state ? state.fixedNetwork : undefined;
            resourceInputs["fixedSubnet"] = state ? state.fixedSubnet : undefined;
            resourceInputs["flavor"] = state ? state.flavor : undefined;
            resourceInputs["floatingIpEnabled"] = state ? state.floatingIpEnabled : undefined;
            resourceInputs["keypair"] = state ? state.keypair : undefined;
            resourceInputs["kubeconfig"] = state ? state.kubeconfig : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["masterAddresses"] = state ? state.masterAddresses : undefined;
            resourceInputs["masterCount"] = state ? state.masterCount : undefined;
            resourceInputs["masterFlavor"] = state ? state.masterFlavor : undefined;
            resourceInputs["mergeLabels"] = state ? state.mergeLabels : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nodeAddresses"] = state ? state.nodeAddresses : undefined;
            resourceInputs["nodeCount"] = state ? state.nodeCount : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["stackId"] = state ? state.stackId : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
            resourceInputs["userId"] = state ? state.userId : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.clusterTemplateId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterTemplateId'");
            }
            resourceInputs["clusterTemplateId"] = args ? args.clusterTemplateId : undefined;
            resourceInputs["createTimeout"] = args ? args.createTimeout : undefined;
            resourceInputs["discoveryUrl"] = args ? args.discoveryUrl : undefined;
            resourceInputs["dockerVolumeSize"] = args ? args.dockerVolumeSize : undefined;
            resourceInputs["fixedNetwork"] = args ? args.fixedNetwork : undefined;
            resourceInputs["fixedSubnet"] = args ? args.fixedSubnet : undefined;
            resourceInputs["flavor"] = args ? args.flavor : undefined;
            resourceInputs["floatingIpEnabled"] = args ? args.floatingIpEnabled : undefined;
            resourceInputs["keypair"] = args ? args.keypair : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["masterCount"] = args ? args.masterCount : undefined;
            resourceInputs["masterFlavor"] = args ? args.masterFlavor : undefined;
            resourceInputs["mergeLabels"] = args ? args.mergeLabels : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nodeCount"] = args ? args.nodeCount : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["apiAddress"] = undefined /*out*/;
            resourceInputs["coeVersion"] = undefined /*out*/;
            resourceInputs["containerVersion"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["kubeconfig"] = undefined /*out*/;
            resourceInputs["masterAddresses"] = undefined /*out*/;
            resourceInputs["nodeAddresses"] = undefined /*out*/;
            resourceInputs["projectId"] = undefined /*out*/;
            resourceInputs["stackId"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
            resourceInputs["userId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Cluster.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing Cluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Cluster(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Cluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Cluster.__pulumiType;
    }
}
exports.Cluster = Cluster;
/** @internal */
Cluster.__pulumiType = 'openstack:containerinfra/cluster:Cluster';
//# sourceMappingURL=cluster.js.map