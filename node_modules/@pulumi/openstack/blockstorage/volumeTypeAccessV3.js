"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.VolumeTypeAccessV3 = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a V3 block storage volume type access resource within OpenStack.
 *
 * > **Note:** This usually requires admin privileges.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as openstack from "@pulumi/openstack";
 *
 * const project1 = new openstack.identity.Project("project_1", {});
 * const volumeType1 = new openstack.blockstorage.VolumeTypeV3("volume_type_1", {
 *     isPublic: false,
 * });
 * const volumeTypeAccess = new openstack.blockstorage.VolumeTypeAccessV3("volume_type_access", {
 *     projectId: project1.id,
 *     volumeTypeId: volumeType1.id,
 * });
 * ```
 *
 * ## Import
 *
 * Volume types access can be imported using the `volume_type_id/project_id`, e.g.
 *
 * ```sh
 *  $ pulumi import openstack:blockstorage/volumeTypeAccessV3:VolumeTypeAccessV3 volume_type_access 941793f0-0a34-4bc4-b72e-a6326ae58283/ed498e81f0cc448bae0ad4f8f21bf67f
 * ```
 */
class VolumeTypeAccessV3 extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["volumeTypeId"] = state ? state.volumeTypeId : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            if ((!args || args.volumeTypeId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'volumeTypeId'");
            }
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["volumeTypeId"] = args ? args.volumeTypeId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VolumeTypeAccessV3.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing VolumeTypeAccessV3 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new VolumeTypeAccessV3(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of VolumeTypeAccessV3.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VolumeTypeAccessV3.__pulumiType;
    }
}
exports.VolumeTypeAccessV3 = VolumeTypeAccessV3;
/** @internal */
VolumeTypeAccessV3.__pulumiType = 'openstack:blockstorage/volumeTypeAccessV3:VolumeTypeAccessV3';
//# sourceMappingURL=volumeTypeAccessV3.js.map