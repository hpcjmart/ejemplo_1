import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
/**
 * Manages a V2 volume resource within OpenStack.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as openstack from "@pulumi/openstack";
 *
 * const volume1 = new openstack.blockstorage.VolumeV2("volume_1", {
 *     description: "first test volume",
 *     region: "RegionOne",
 *     size: 3,
 * });
 * ```
 *
 * ## Import
 *
 * Volumes can be imported using the `id`, e.g.
 *
 * ```sh
 *  $ pulumi import openstack:blockstorage/volumeV2:VolumeV2 volume_1 ea257959-eeb1-4c10-8d33-26f0409a755d
 * ```
 */
export declare class VolumeV2 extends pulumi.CustomResource {
    /**
     * Get an existing VolumeV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VolumeV2State, opts?: pulumi.CustomResourceOptions): VolumeV2;
    /**
     * Returns true if the given object is an instance of VolumeV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is VolumeV2;
    /**
     * If a volume is attached to an instance, this attribute will
     * display the Attachment ID, Instance ID, and the Device as the Instance
     * sees it.
     */
    readonly attachments: pulumi.Output<outputs.blockstorage.VolumeV2Attachment[]>;
    /**
     * The availability zone for the volume.
     * Changing this creates a new volume.
     */
    readonly availabilityZone: pulumi.Output<string>;
    /**
     * The consistency group to place the volume
     * in.
     */
    readonly consistencyGroupId: pulumi.Output<string | undefined>;
    /**
     * A description of the volume. Changing this updates
     * the volume's description.
     */
    readonly description: pulumi.Output<string | undefined>;
    /**
     * The image ID from which to create the volume.
     * Changing this creates a new volume.
     */
    readonly imageId: pulumi.Output<string | undefined>;
    /**
     * Metadata key/value pairs to associate with the volume.
     * Changing this updates the existing volume metadata.
     */
    readonly metadata: pulumi.Output<{
        [key: string]: any;
    }>;
    /**
     * A unique name for the volume. Changing this updates the
     * volume's name.
     */
    readonly name: pulumi.Output<string>;
    /**
     * The region in which to create the volume. If
     * omitted, the `region` argument of the provider is used. Changing this
     * creates a new volume.
     */
    readonly region: pulumi.Output<string>;
    /**
     * Provide the Cinder scheduler with hints on where
     * to instantiate a volume in the OpenStack cloud. The available hints are described below.
     */
    readonly schedulerHints: pulumi.Output<outputs.blockstorage.VolumeV2SchedulerHint[] | undefined>;
    /**
     * The size of the volume to create (in gigabytes). Changing
     * this creates a new volume.
     */
    readonly size: pulumi.Output<number>;
    /**
     * The snapshot ID from which to create the volume.
     * Changing this creates a new volume.
     */
    readonly snapshotId: pulumi.Output<string | undefined>;
    /**
     * The volume ID to replicate with.
     */
    readonly sourceReplica: pulumi.Output<string | undefined>;
    /**
     * The volume ID from which to create the volume.
     * Changing this creates a new volume.
     */
    readonly sourceVolId: pulumi.Output<string | undefined>;
    /**
     * The type of volume to create.
     * Changing this creates a new volume.
     */
    readonly volumeType: pulumi.Output<string>;
    /**
     * Create a VolumeV2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VolumeV2Args, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering VolumeV2 resources.
 */
export interface VolumeV2State {
    /**
     * If a volume is attached to an instance, this attribute will
     * display the Attachment ID, Instance ID, and the Device as the Instance
     * sees it.
     */
    attachments?: pulumi.Input<pulumi.Input<inputs.blockstorage.VolumeV2Attachment>[]>;
    /**
     * The availability zone for the volume.
     * Changing this creates a new volume.
     */
    availabilityZone?: pulumi.Input<string>;
    /**
     * The consistency group to place the volume
     * in.
     */
    consistencyGroupId?: pulumi.Input<string>;
    /**
     * A description of the volume. Changing this updates
     * the volume's description.
     */
    description?: pulumi.Input<string>;
    /**
     * The image ID from which to create the volume.
     * Changing this creates a new volume.
     */
    imageId?: pulumi.Input<string>;
    /**
     * Metadata key/value pairs to associate with the volume.
     * Changing this updates the existing volume metadata.
     */
    metadata?: pulumi.Input<{
        [key: string]: any;
    }>;
    /**
     * A unique name for the volume. Changing this updates the
     * volume's name.
     */
    name?: pulumi.Input<string>;
    /**
     * The region in which to create the volume. If
     * omitted, the `region` argument of the provider is used. Changing this
     * creates a new volume.
     */
    region?: pulumi.Input<string>;
    /**
     * Provide the Cinder scheduler with hints on where
     * to instantiate a volume in the OpenStack cloud. The available hints are described below.
     */
    schedulerHints?: pulumi.Input<pulumi.Input<inputs.blockstorage.VolumeV2SchedulerHint>[]>;
    /**
     * The size of the volume to create (in gigabytes). Changing
     * this creates a new volume.
     */
    size?: pulumi.Input<number>;
    /**
     * The snapshot ID from which to create the volume.
     * Changing this creates a new volume.
     */
    snapshotId?: pulumi.Input<string>;
    /**
     * The volume ID to replicate with.
     */
    sourceReplica?: pulumi.Input<string>;
    /**
     * The volume ID from which to create the volume.
     * Changing this creates a new volume.
     */
    sourceVolId?: pulumi.Input<string>;
    /**
     * The type of volume to create.
     * Changing this creates a new volume.
     */
    volumeType?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a VolumeV2 resource.
 */
export interface VolumeV2Args {
    /**
     * The availability zone for the volume.
     * Changing this creates a new volume.
     */
    availabilityZone?: pulumi.Input<string>;
    /**
     * The consistency group to place the volume
     * in.
     */
    consistencyGroupId?: pulumi.Input<string>;
    /**
     * A description of the volume. Changing this updates
     * the volume's description.
     */
    description?: pulumi.Input<string>;
    /**
     * The image ID from which to create the volume.
     * Changing this creates a new volume.
     */
    imageId?: pulumi.Input<string>;
    /**
     * Metadata key/value pairs to associate with the volume.
     * Changing this updates the existing volume metadata.
     */
    metadata?: pulumi.Input<{
        [key: string]: any;
    }>;
    /**
     * A unique name for the volume. Changing this updates the
     * volume's name.
     */
    name?: pulumi.Input<string>;
    /**
     * The region in which to create the volume. If
     * omitted, the `region` argument of the provider is used. Changing this
     * creates a new volume.
     */
    region?: pulumi.Input<string>;
    /**
     * Provide the Cinder scheduler with hints on where
     * to instantiate a volume in the OpenStack cloud. The available hints are described below.
     */
    schedulerHints?: pulumi.Input<pulumi.Input<inputs.blockstorage.VolumeV2SchedulerHint>[]>;
    /**
     * The size of the volume to create (in gigabytes). Changing
     * this creates a new volume.
     */
    size: pulumi.Input<number>;
    /**
     * The snapshot ID from which to create the volume.
     * Changing this creates a new volume.
     */
    snapshotId?: pulumi.Input<string>;
    /**
     * The volume ID to replicate with.
     */
    sourceReplica?: pulumi.Input<string>;
    /**
     * The volume ID from which to create the volume.
     * Changing this creates a new volume.
     */
    sourceVolId?: pulumi.Input<string>;
    /**
     * The type of volume to create.
     * Changing this creates a new volume.
     */
    volumeType?: pulumi.Input<string>;
}
