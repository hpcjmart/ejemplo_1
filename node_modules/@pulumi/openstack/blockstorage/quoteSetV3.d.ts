import * as pulumi from "@pulumi/pulumi";
/**
 * Manages a V3 block storage quotaset resource within OpenStack.
 *
 * > **Note:** This usually requires admin privileges.
 *
 * > **Note:** This resource has a no-op deletion so no actual actions will be done against the OpenStack API
 *     in case of delete call.
 *
 * > **Note:** This resource has all-in creation so all optional quota arguments that were not specified are
 *     created with zero value. This excludes volume type quota.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as openstack from "@pulumi/openstack";
 *
 * const project1 = new openstack.identity.Project("project1", {});
 * const quotaset1 = new openstack.blockstorage.QuoteSetV3("quotaset1", {
 *     projectId: project1.id,
 *     volumes: 10,
 *     snapshots: 4,
 *     gigabytes: 100,
 *     perVolumeGigabytes: 10,
 *     backups: 4,
 *     backupGigabytes: 10,
 *     groups: 100,
 *     volumeTypeQuota: {
 *         volumes_ssd: 30,
 *         gigabytes_ssd: 500,
 *         snapshots_ssd: 10,
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Quotasets can be imported using the `project_id/region`, e.g.
 *
 * ```sh
 *  $ pulumi import openstack:blockstorage/quoteSetV3:QuoteSetV3 quotaset_1 2a0f2240-c5e6-41de-896d-e80d97428d6b/region_1
 * ```
 */
export declare class QuoteSetV3 extends pulumi.CustomResource {
    /**
     * Get an existing QuoteSetV3 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: QuoteSetV3State, opts?: pulumi.CustomResourceOptions): QuoteSetV3;
    /**
     * Returns true if the given object is an instance of QuoteSetV3.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is QuoteSetV3;
    /**
     * Quota value for backup gigabytes. Changing
     * this updates the existing quotaset.
     */
    readonly backupGigabytes: pulumi.Output<number>;
    /**
     * Quota value for backups. Changing this updates the
     * existing quotaset.
     */
    readonly backups: pulumi.Output<number>;
    /**
     * Quota value for gigabytes. Changing this updates the
     * existing quotaset.
     */
    readonly gigabytes: pulumi.Output<number>;
    /**
     * Quota value for groups. Changing this updates the
     * existing quotaset.
     */
    readonly groups: pulumi.Output<number>;
    /**
     * Quota value for gigabytes per volume .
     * Changing this updates the existing quotaset.
     */
    readonly perVolumeGigabytes: pulumi.Output<number>;
    /**
     * ID of the project to manage quotas. Changing this
     * creates a new quotaset.
     */
    readonly projectId: pulumi.Output<string>;
    /**
     * The region in which to create the volume. If
     * omitted, the `region` argument of the provider is used. Changing this
     * creates a new quotaset.
     */
    readonly region: pulumi.Output<string>;
    /**
     * Quota value for snapshots. Changing this updates the
     * existing quotaset.
     */
    readonly snapshots: pulumi.Output<number>;
    /**
     * Key/Value pairs for setting quota for
     * volumes types. Possible keys are `snapshots_<volume_type_name>`,
     * `volumes_<volume_type_name>` and `gigabytes_<volume_type_name>`.
     */
    readonly volumeTypeQuota: pulumi.Output<{
        [key: string]: any;
    } | undefined>;
    /**
     * Quota value for volumes. Changing this updates the
     * existing quotaset.
     */
    readonly volumes: pulumi.Output<number>;
    /**
     * Create a QuoteSetV3 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: QuoteSetV3Args, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering QuoteSetV3 resources.
 */
export interface QuoteSetV3State {
    /**
     * Quota value for backup gigabytes. Changing
     * this updates the existing quotaset.
     */
    backupGigabytes?: pulumi.Input<number>;
    /**
     * Quota value for backups. Changing this updates the
     * existing quotaset.
     */
    backups?: pulumi.Input<number>;
    /**
     * Quota value for gigabytes. Changing this updates the
     * existing quotaset.
     */
    gigabytes?: pulumi.Input<number>;
    /**
     * Quota value for groups. Changing this updates the
     * existing quotaset.
     */
    groups?: pulumi.Input<number>;
    /**
     * Quota value for gigabytes per volume .
     * Changing this updates the existing quotaset.
     */
    perVolumeGigabytes?: pulumi.Input<number>;
    /**
     * ID of the project to manage quotas. Changing this
     * creates a new quotaset.
     */
    projectId?: pulumi.Input<string>;
    /**
     * The region in which to create the volume. If
     * omitted, the `region` argument of the provider is used. Changing this
     * creates a new quotaset.
     */
    region?: pulumi.Input<string>;
    /**
     * Quota value for snapshots. Changing this updates the
     * existing quotaset.
     */
    snapshots?: pulumi.Input<number>;
    /**
     * Key/Value pairs for setting quota for
     * volumes types. Possible keys are `snapshots_<volume_type_name>`,
     * `volumes_<volume_type_name>` and `gigabytes_<volume_type_name>`.
     */
    volumeTypeQuota?: pulumi.Input<{
        [key: string]: any;
    }>;
    /**
     * Quota value for volumes. Changing this updates the
     * existing quotaset.
     */
    volumes?: pulumi.Input<number>;
}
/**
 * The set of arguments for constructing a QuoteSetV3 resource.
 */
export interface QuoteSetV3Args {
    /**
     * Quota value for backup gigabytes. Changing
     * this updates the existing quotaset.
     */
    backupGigabytes?: pulumi.Input<number>;
    /**
     * Quota value for backups. Changing this updates the
     * existing quotaset.
     */
    backups?: pulumi.Input<number>;
    /**
     * Quota value for gigabytes. Changing this updates the
     * existing quotaset.
     */
    gigabytes?: pulumi.Input<number>;
    /**
     * Quota value for groups. Changing this updates the
     * existing quotaset.
     */
    groups?: pulumi.Input<number>;
    /**
     * Quota value for gigabytes per volume .
     * Changing this updates the existing quotaset.
     */
    perVolumeGigabytes?: pulumi.Input<number>;
    /**
     * ID of the project to manage quotas. Changing this
     * creates a new quotaset.
     */
    projectId: pulumi.Input<string>;
    /**
     * The region in which to create the volume. If
     * omitted, the `region` argument of the provider is used. Changing this
     * creates a new quotaset.
     */
    region?: pulumi.Input<string>;
    /**
     * Quota value for snapshots. Changing this updates the
     * existing quotaset.
     */
    snapshots?: pulumi.Input<number>;
    /**
     * Key/Value pairs for setting quota for
     * volumes types. Possible keys are `snapshots_<volume_type_name>`,
     * `volumes_<volume_type_name>` and `gigabytes_<volume_type_name>`.
     */
    volumeTypeQuota?: pulumi.Input<{
        [key: string]: any;
    }>;
    /**
     * Quota value for volumes. Changing this updates the
     * existing quotaset.
     */
    volumes?: pulumi.Input<number>;
}
