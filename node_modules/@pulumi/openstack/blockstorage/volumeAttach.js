"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.VolumeAttach = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * ## Import
 *
 * It is not possible to import this resource.
 */
class VolumeAttach extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["attachMode"] = state ? state.attachMode : undefined;
            resourceInputs["data"] = state ? state.data : undefined;
            resourceInputs["device"] = state ? state.device : undefined;
            resourceInputs["driverVolumeType"] = state ? state.driverVolumeType : undefined;
            resourceInputs["hostName"] = state ? state.hostName : undefined;
            resourceInputs["initiator"] = state ? state.initiator : undefined;
            resourceInputs["ipAddress"] = state ? state.ipAddress : undefined;
            resourceInputs["mountPointBase"] = state ? state.mountPointBase : undefined;
            resourceInputs["multipath"] = state ? state.multipath : undefined;
            resourceInputs["osType"] = state ? state.osType : undefined;
            resourceInputs["platform"] = state ? state.platform : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["volumeId"] = state ? state.volumeId : undefined;
            resourceInputs["wwnn"] = state ? state.wwnn : undefined;
            resourceInputs["wwpns"] = state ? state.wwpns : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.hostName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hostName'");
            }
            if ((!args || args.volumeId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'volumeId'");
            }
            resourceInputs["attachMode"] = args ? args.attachMode : undefined;
            resourceInputs["device"] = args ? args.device : undefined;
            resourceInputs["hostName"] = args ? args.hostName : undefined;
            resourceInputs["initiator"] = args ? args.initiator : undefined;
            resourceInputs["ipAddress"] = args ? args.ipAddress : undefined;
            resourceInputs["multipath"] = args ? args.multipath : undefined;
            resourceInputs["osType"] = args ? args.osType : undefined;
            resourceInputs["platform"] = args ? args.platform : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["volumeId"] = args ? args.volumeId : undefined;
            resourceInputs["wwnn"] = args ? args.wwnn : undefined;
            resourceInputs["wwpns"] = args ? args.wwpns : undefined;
            resourceInputs["data"] = undefined /*out*/;
            resourceInputs["driverVolumeType"] = undefined /*out*/;
            resourceInputs["mountPointBase"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VolumeAttach.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing VolumeAttach resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new VolumeAttach(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of VolumeAttach.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VolumeAttach.__pulumiType;
    }
}
exports.VolumeAttach = VolumeAttach;
/** @internal */
VolumeAttach.__pulumiType = 'openstack:blockstorage/volumeAttach:VolumeAttach';
//# sourceMappingURL=volumeAttach.js.map