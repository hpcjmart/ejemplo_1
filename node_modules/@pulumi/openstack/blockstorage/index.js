"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
// Export members:
__exportStar(require("./getAvailabilityZonesV3"), exports);
__exportStar(require("./getQuotasetV3"), exports);
__exportStar(require("./getSnapshotV2"), exports);
__exportStar(require("./getSnapshotV3"), exports);
__exportStar(require("./getVolumeV2"), exports);
__exportStar(require("./getVolumeV3"), exports);
__exportStar(require("./qosAssociationV3"), exports);
__exportStar(require("./qosV3"), exports);
__exportStar(require("./quoteSetV2"), exports);
__exportStar(require("./quoteSetV3"), exports);
__exportStar(require("./volume"), exports);
__exportStar(require("./volumeAttach"), exports);
__exportStar(require("./volumeAttachV2"), exports);
__exportStar(require("./volumeTypeAccessV3"), exports);
__exportStar(require("./volumeTypeV3"), exports);
__exportStar(require("./volumeV1"), exports);
__exportStar(require("./volumeV2"), exports);
// Import resources to register:
const qosAssociationV3_1 = require("./qosAssociationV3");
const qosV3_1 = require("./qosV3");
const quoteSetV2_1 = require("./quoteSetV2");
const quoteSetV3_1 = require("./quoteSetV3");
const volume_1 = require("./volume");
const volumeAttach_1 = require("./volumeAttach");
const volumeAttachV2_1 = require("./volumeAttachV2");
const volumeTypeAccessV3_1 = require("./volumeTypeAccessV3");
const volumeTypeV3_1 = require("./volumeTypeV3");
const volumeV1_1 = require("./volumeV1");
const volumeV2_1 = require("./volumeV2");
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "openstack:blockstorage/qosAssociationV3:QosAssociationV3":
                return new qosAssociationV3_1.QosAssociationV3(name, undefined, { urn });
            case "openstack:blockstorage/qosV3:QosV3":
                return new qosV3_1.QosV3(name, undefined, { urn });
            case "openstack:blockstorage/quoteSetV2:QuoteSetV2":
                return new quoteSetV2_1.QuoteSetV2(name, undefined, { urn });
            case "openstack:blockstorage/quoteSetV3:QuoteSetV3":
                return new quoteSetV3_1.QuoteSetV3(name, undefined, { urn });
            case "openstack:blockstorage/volume:Volume":
                return new volume_1.Volume(name, undefined, { urn });
            case "openstack:blockstorage/volumeAttach:VolumeAttach":
                return new volumeAttach_1.VolumeAttach(name, undefined, { urn });
            case "openstack:blockstorage/volumeAttachV2:VolumeAttachV2":
                return new volumeAttachV2_1.VolumeAttachV2(name, undefined, { urn });
            case "openstack:blockstorage/volumeTypeAccessV3:VolumeTypeAccessV3":
                return new volumeTypeAccessV3_1.VolumeTypeAccessV3(name, undefined, { urn });
            case "openstack:blockstorage/volumeTypeV3:VolumeTypeV3":
                return new volumeTypeV3_1.VolumeTypeV3(name, undefined, { urn });
            case "openstack:blockstorage/volumeV1:VolumeV1":
                return new volumeV1_1.VolumeV1(name, undefined, { urn });
            case "openstack:blockstorage/volumeV2:VolumeV2":
                return new volumeV2_1.VolumeV2(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("openstack", "blockstorage/qosAssociationV3", _module);
pulumi.runtime.registerResourceModule("openstack", "blockstorage/qosV3", _module);
pulumi.runtime.registerResourceModule("openstack", "blockstorage/quoteSetV2", _module);
pulumi.runtime.registerResourceModule("openstack", "blockstorage/quoteSetV3", _module);
pulumi.runtime.registerResourceModule("openstack", "blockstorage/volume", _module);
pulumi.runtime.registerResourceModule("openstack", "blockstorage/volumeAttach", _module);
pulumi.runtime.registerResourceModule("openstack", "blockstorage/volumeAttachV2", _module);
pulumi.runtime.registerResourceModule("openstack", "blockstorage/volumeTypeAccessV3", _module);
pulumi.runtime.registerResourceModule("openstack", "blockstorage/volumeTypeV3", _module);
pulumi.runtime.registerResourceModule("openstack", "blockstorage/volumeV1", _module);
pulumi.runtime.registerResourceModule("openstack", "blockstorage/volumeV2", _module);
//# sourceMappingURL=index.js.map