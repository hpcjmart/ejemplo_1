import * as pulumi from "@pulumi/pulumi";
/**
 * Manages a V3 block storage volume type access resource within OpenStack.
 *
 * > **Note:** This usually requires admin privileges.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as openstack from "@pulumi/openstack";
 *
 * const project1 = new openstack.identity.Project("project_1", {});
 * const volumeType1 = new openstack.blockstorage.VolumeTypeV3("volume_type_1", {
 *     isPublic: false,
 * });
 * const volumeTypeAccess = new openstack.blockstorage.VolumeTypeAccessV3("volume_type_access", {
 *     projectId: project1.id,
 *     volumeTypeId: volumeType1.id,
 * });
 * ```
 *
 * ## Import
 *
 * Volume types access can be imported using the `volume_type_id/project_id`, e.g.
 *
 * ```sh
 *  $ pulumi import openstack:blockstorage/volumeTypeAccessV3:VolumeTypeAccessV3 volume_type_access 941793f0-0a34-4bc4-b72e-a6326ae58283/ed498e81f0cc448bae0ad4f8f21bf67f
 * ```
 */
export declare class VolumeTypeAccessV3 extends pulumi.CustomResource {
    /**
     * Get an existing VolumeTypeAccessV3 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VolumeTypeAccessV3State, opts?: pulumi.CustomResourceOptions): VolumeTypeAccessV3;
    /**
     * Returns true if the given object is an instance of VolumeTypeAccessV3.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is VolumeTypeAccessV3;
    /**
     * ID of the project to give access to. Changing this
     * creates a new resource.
     */
    readonly projectId: pulumi.Output<string>;
    /**
     * The region in which to create the volume. If
     * omitted, the `region` argument of the provider is used. Changing this
     * creates a new quotaset.
     */
    readonly region: pulumi.Output<string>;
    /**
     * ID of the volume type to give access to. Changing
     * this creates a new resource.
     */
    readonly volumeTypeId: pulumi.Output<string>;
    /**
     * Create a VolumeTypeAccessV3 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VolumeTypeAccessV3Args, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering VolumeTypeAccessV3 resources.
 */
export interface VolumeTypeAccessV3State {
    /**
     * ID of the project to give access to. Changing this
     * creates a new resource.
     */
    projectId?: pulumi.Input<string>;
    /**
     * The region in which to create the volume. If
     * omitted, the `region` argument of the provider is used. Changing this
     * creates a new quotaset.
     */
    region?: pulumi.Input<string>;
    /**
     * ID of the volume type to give access to. Changing
     * this creates a new resource.
     */
    volumeTypeId?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a VolumeTypeAccessV3 resource.
 */
export interface VolumeTypeAccessV3Args {
    /**
     * ID of the project to give access to. Changing this
     * creates a new resource.
     */
    projectId: pulumi.Input<string>;
    /**
     * The region in which to create the volume. If
     * omitted, the `region` argument of the provider is used. Changing this
     * creates a new quotaset.
     */
    region?: pulumi.Input<string>;
    /**
     * ID of the volume type to give access to. Changing
     * this creates a new resource.
     */
    volumeTypeId: pulumi.Input<string>;
}
