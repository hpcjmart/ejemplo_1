"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContainerObject = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a V1 container object resource within OpenStack.
 *
 * ## Example Usage
 * ### Example with simple content
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as openstack from "@pulumi/openstack";
 *
 * const container1 = new openstack.objectstorage.Container("container_1", {
 *     contentType: "application/json",
 *     metadata: {
 *         test: "true",
 *     },
 *     region: "RegionOne",
 * });
 * const doc1 = new openstack.objectstorage.ContainerObject("doc_1", {
 *     containerName: container1.name,
 *     content: `               {
 *                  "foo" : "bar"
 *                }
 * `,
 *     contentType: "application/json",
 *     metadata: {
 *         test: "true",
 *     },
 *     region: "RegionOne",
 * });
 * ```
 * ### Example with content from file
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as openstack from "@pulumi/openstack";
 *
 * const container1 = new openstack.objectstorage.Container("container_1", {
 *     contentType: "application/json",
 *     metadata: {
 *         test: "true",
 *     },
 *     region: "RegionOne",
 * });
 * const doc1 = new openstack.objectstorage.ContainerObject("doc_1", {
 *     containerName: container1.name,
 *     contentType: "application/json",
 *     metadata: {
 *         test: "true",
 *     },
 *     region: "RegionOne",
 *     source: "./default.json",
 * });
 * ```
 */
class ContainerObject extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["containerName"] = state ? state.containerName : undefined;
            resourceInputs["content"] = state ? state.content : undefined;
            resourceInputs["contentDisposition"] = state ? state.contentDisposition : undefined;
            resourceInputs["contentEncoding"] = state ? state.contentEncoding : undefined;
            resourceInputs["contentLength"] = state ? state.contentLength : undefined;
            resourceInputs["contentType"] = state ? state.contentType : undefined;
            resourceInputs["copyFrom"] = state ? state.copyFrom : undefined;
            resourceInputs["date"] = state ? state.date : undefined;
            resourceInputs["deleteAfter"] = state ? state.deleteAfter : undefined;
            resourceInputs["deleteAt"] = state ? state.deleteAt : undefined;
            resourceInputs["detectContentType"] = state ? state.detectContentType : undefined;
            resourceInputs["etag"] = state ? state.etag : undefined;
            resourceInputs["lastModified"] = state ? state.lastModified : undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["objectManifest"] = state ? state.objectManifest : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["source"] = state ? state.source : undefined;
            resourceInputs["transId"] = state ? state.transId : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.containerName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'containerName'");
            }
            resourceInputs["containerName"] = args ? args.containerName : undefined;
            resourceInputs["content"] = args ? args.content : undefined;
            resourceInputs["contentDisposition"] = args ? args.contentDisposition : undefined;
            resourceInputs["contentEncoding"] = args ? args.contentEncoding : undefined;
            resourceInputs["contentType"] = args ? args.contentType : undefined;
            resourceInputs["copyFrom"] = args ? args.copyFrom : undefined;
            resourceInputs["deleteAfter"] = args ? args.deleteAfter : undefined;
            resourceInputs["deleteAt"] = args ? args.deleteAt : undefined;
            resourceInputs["detectContentType"] = args ? args.detectContentType : undefined;
            resourceInputs["etag"] = args ? args.etag : undefined;
            resourceInputs["metadata"] = args ? args.metadata : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["objectManifest"] = args ? args.objectManifest : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["source"] = args ? args.source : undefined;
            resourceInputs["contentLength"] = undefined /*out*/;
            resourceInputs["date"] = undefined /*out*/;
            resourceInputs["lastModified"] = undefined /*out*/;
            resourceInputs["transId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ContainerObject.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing ContainerObject resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new ContainerObject(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of ContainerObject.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ContainerObject.__pulumiType;
    }
}
exports.ContainerObject = ContainerObject;
/** @internal */
ContainerObject.__pulumiType = 'openstack:objectstorage/containerObject:ContainerObject';
//# sourceMappingURL=containerObject.js.map