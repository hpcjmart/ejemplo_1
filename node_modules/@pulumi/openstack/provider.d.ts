import * as pulumi from "@pulumi/pulumi";
/**
 * The provider type for the openstack package. By default, resources use package-wide configuration
 * settings, however an explicit `Provider` instance may be created and passed during resource
 * construction to achieve fine-grained programmatic control over provider settings. See the
 * [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
 */
export declare class Provider extends pulumi.ProviderResource {
    /**
     * Returns true if the given object is an instance of Provider.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Provider;
    /**
     * Application Credential ID to login with.
     */
    readonly applicationCredentialId: pulumi.Output<string | undefined>;
    /**
     * Application Credential name to login with.
     */
    readonly applicationCredentialName: pulumi.Output<string | undefined>;
    /**
     * Application Credential secret to login with.
     */
    readonly applicationCredentialSecret: pulumi.Output<string | undefined>;
    /**
     * The Identity authentication URL.
     */
    readonly authUrl: pulumi.Output<string | undefined>;
    /**
     * A Custom CA certificate.
     */
    readonly cacertFile: pulumi.Output<string | undefined>;
    /**
     * A client certificate to authenticate with.
     */
    readonly cert: pulumi.Output<string | undefined>;
    /**
     * An entry in a `clouds.yaml` file to use.
     */
    readonly cloud: pulumi.Output<string | undefined>;
    /**
     * The name of the Domain ID to scope to if no other domain is specified. Defaults to `default` (Identity v3).
     */
    readonly defaultDomain: pulumi.Output<string | undefined>;
    /**
     * The ID of the Domain to scope to (Identity v3).
     */
    readonly domainId: pulumi.Output<string | undefined>;
    /**
     * The name of the Domain to scope to (Identity v3).
     */
    readonly domainName: pulumi.Output<string | undefined>;
    readonly endpointType: pulumi.Output<string | undefined>;
    /**
     * A client private key to authenticate with.
     */
    readonly key: pulumi.Output<string | undefined>;
    /**
     * Password to login with.
     */
    readonly password: pulumi.Output<string | undefined>;
    /**
     * The ID of the domain where the proejct resides (Identity v3).
     */
    readonly projectDomainId: pulumi.Output<string | undefined>;
    /**
     * The name of the domain where the project resides (Identity v3).
     */
    readonly projectDomainName: pulumi.Output<string | undefined>;
    /**
     * The OpenStack region to connect to.
     */
    readonly region: pulumi.Output<string | undefined>;
    /**
     * The ID of the Tenant (Identity v2) or Project (Identity v3) to login with.
     */
    readonly tenantId: pulumi.Output<string | undefined>;
    /**
     * The name of the Tenant (Identity v2) or Project (Identity v3) to login with.
     */
    readonly tenantName: pulumi.Output<string | undefined>;
    /**
     * Authentication token to use as an alternative to username/password.
     */
    readonly token: pulumi.Output<string | undefined>;
    /**
     * The ID of the domain where the user resides (Identity v3).
     */
    readonly userDomainId: pulumi.Output<string | undefined>;
    /**
     * The name of the domain where the user resides (Identity v3).
     */
    readonly userDomainName: pulumi.Output<string | undefined>;
    /**
     * Username to login with.
     */
    readonly userId: pulumi.Output<string | undefined>;
    /**
     * Username to login with.
     */
    readonly userName: pulumi.Output<string | undefined>;
    /**
     * Create a Provider resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ProviderArgs, opts?: pulumi.ResourceOptions);
}
/**
 * The set of arguments for constructing a Provider resource.
 */
export interface ProviderArgs {
    /**
     * If set to `false`, OpenStack authorization won't be perfomed automatically, if the initial auth token get expired.
     * Defaults to `true`
     */
    allowReauth?: pulumi.Input<boolean>;
    /**
     * Application Credential ID to login with.
     */
    applicationCredentialId?: pulumi.Input<string>;
    /**
     * Application Credential name to login with.
     */
    applicationCredentialName?: pulumi.Input<string>;
    /**
     * Application Credential secret to login with.
     */
    applicationCredentialSecret?: pulumi.Input<string>;
    /**
     * The Identity authentication URL.
     */
    authUrl?: pulumi.Input<string>;
    /**
     * A Custom CA certificate.
     */
    cacertFile?: pulumi.Input<string>;
    /**
     * A client certificate to authenticate with.
     */
    cert?: pulumi.Input<string>;
    /**
     * An entry in a `clouds.yaml` file to use.
     */
    cloud?: pulumi.Input<string>;
    /**
     * The name of the Domain ID to scope to if no other domain is specified. Defaults to `default` (Identity v3).
     */
    defaultDomain?: pulumi.Input<string>;
    /**
     * If set to `false`, OpenStack authorization will be perfomed, every time the service provider client is called. Defaults
     * to `true`.
     */
    delayedAuth?: pulumi.Input<boolean>;
    /**
     * If set to `true`, the HTTP `Cache-Control: no-cache` header will not be added by default to all API requests.
     */
    disableNoCacheHeader?: pulumi.Input<boolean>;
    /**
     * The ID of the Domain to scope to (Identity v3).
     */
    domainId?: pulumi.Input<string>;
    /**
     * The name of the Domain to scope to (Identity v3).
     */
    domainName?: pulumi.Input<string>;
    /**
     * Outputs very verbose logs with all calls made to and responses from OpenStack
     */
    enableLogging?: pulumi.Input<boolean>;
    /**
     * A map of services with an endpoint to override what was from the Keystone catalog
     */
    endpointOverrides?: pulumi.Input<{
        [key: string]: any;
    }>;
    endpointType?: pulumi.Input<string>;
    /**
     * Trust self-signed certificates.
     */
    insecure?: pulumi.Input<boolean>;
    /**
     * A client private key to authenticate with.
     */
    key?: pulumi.Input<string>;
    /**
     * How many times HTTP connection should be retried until giving up.
     */
    maxRetries?: pulumi.Input<number>;
    /**
     * Password to login with.
     */
    password?: pulumi.Input<string>;
    /**
     * The ID of the domain where the proejct resides (Identity v3).
     */
    projectDomainId?: pulumi.Input<string>;
    /**
     * The name of the domain where the project resides (Identity v3).
     */
    projectDomainName?: pulumi.Input<string>;
    /**
     * The OpenStack region to connect to.
     */
    region?: pulumi.Input<string>;
    /**
     * Use Swift's authentication system instead of Keystone. Only used for interaction with Swift.
     */
    swauth?: pulumi.Input<boolean>;
    /**
     * The ID of the Tenant (Identity v2) or Project (Identity v3) to login with.
     */
    tenantId?: pulumi.Input<string>;
    /**
     * The name of the Tenant (Identity v2) or Project (Identity v3) to login with.
     */
    tenantName?: pulumi.Input<string>;
    /**
     * Authentication token to use as an alternative to username/password.
     */
    token?: pulumi.Input<string>;
    /**
     * If set to `true`, API requests will go the Load Balancer service (Octavia) instead of the Networking service (Neutron).
     */
    useOctavia?: pulumi.Input<boolean>;
    /**
     * The ID of the domain where the user resides (Identity v3).
     */
    userDomainId?: pulumi.Input<string>;
    /**
     * The name of the domain where the user resides (Identity v3).
     */
    userDomainName?: pulumi.Input<string>;
    /**
     * Username to login with.
     */
    userId?: pulumi.Input<string>;
    /**
     * Username to login with.
     */
    userName?: pulumi.Input<string>;
}
