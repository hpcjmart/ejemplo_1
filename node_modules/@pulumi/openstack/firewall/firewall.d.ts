import * as pulumi from "@pulumi/pulumi";
/**
 * Manages a v1 firewall resource within OpenStack.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as openstack from "@pulumi/openstack";
 *
 * const rule1 = new openstack.firewall.Rule("rule_1", {
 *     action: "deny",
 *     description: "drop TELNET traffic",
 *     destinationPort: "23",
 *     enabled: true,
 *     protocol: "tcp",
 * });
 * const rule2 = new openstack.firewall.Rule("rule_2", {
 *     action: "deny",
 *     description: "drop NTP traffic",
 *     destinationPort: "123",
 *     enabled: false,
 *     protocol: "udp",
 * });
 * const policy1 = new openstack.firewall.Policy("policy_1", {
 *     rules: [
 *         rule1.id,
 *         rule2.id,
 *     ],
 * });
 * const firewall1 = new openstack.firewall.Firewall("firewall_1", {
 *     policyId: policy1.id,
 * });
 * ```
 *
 * ## Import
 *
 * Firewalls can be imported using the `id`, e.g.
 *
 * ```sh
 *  $ pulumi import openstack:firewall/firewall:Firewall firewall_1 c9e39fb2-ce20-46c8-a964-25f3898c7a97
 * ```
 */
export declare class Firewall extends pulumi.CustomResource {
    /**
     * Get an existing Firewall resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FirewallState, opts?: pulumi.CustomResourceOptions): Firewall;
    /**
     * Returns true if the given object is an instance of Firewall.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Firewall;
    /**
     * Administrative up/down status for the firewall
     * (must be "true" or "false" if provided - defaults to "true").
     * Changing this updates the `adminStateUp` of an existing firewall.
     */
    readonly adminStateUp: pulumi.Output<boolean | undefined>;
    /**
     * Router(s) to associate this firewall instance
     * with. Must be a list of strings. Changing this updates the associated routers
     * of an existing firewall. Conflicts with `noRouters`.
     */
    readonly associatedRouters: pulumi.Output<string[]>;
    /**
     * A description for the firewall. Changing this
     * updates the `description` of an existing firewall.
     */
    readonly description: pulumi.Output<string | undefined>;
    /**
     * A name for the firewall. Changing this
     * updates the `name` of an existing firewall.
     */
    readonly name: pulumi.Output<string>;
    /**
     * Should this firewall not be associated with any routers
     * (must be "true" or "false" if provide - defaults to "false").
     * Conflicts with `associatedRouters`.
     */
    readonly noRouters: pulumi.Output<boolean | undefined>;
    /**
     * The policy resource id for the firewall. Changing
     * this updates the `policyId` of an existing firewall.
     */
    readonly policyId: pulumi.Output<string>;
    /**
     * The region in which to obtain the v1 networking client.
     * A networking client is needed to create a firewall. If omitted, the
     * `region` argument of the provider is used. Changing this creates a new
     * firewall.
     */
    readonly region: pulumi.Output<string>;
    /**
     * The owner of the floating IP. Required if admin wants
     * to create a firewall for another tenant. Changing this creates a new
     * firewall.
     */
    readonly tenantId: pulumi.Output<string>;
    /**
     * Map of additional options.
     */
    readonly valueSpecs: pulumi.Output<{
        [key: string]: any;
    } | undefined>;
    /**
     * Create a Firewall resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FirewallArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering Firewall resources.
 */
export interface FirewallState {
    /**
     * Administrative up/down status for the firewall
     * (must be "true" or "false" if provided - defaults to "true").
     * Changing this updates the `adminStateUp` of an existing firewall.
     */
    adminStateUp?: pulumi.Input<boolean>;
    /**
     * Router(s) to associate this firewall instance
     * with. Must be a list of strings. Changing this updates the associated routers
     * of an existing firewall. Conflicts with `noRouters`.
     */
    associatedRouters?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A description for the firewall. Changing this
     * updates the `description` of an existing firewall.
     */
    description?: pulumi.Input<string>;
    /**
     * A name for the firewall. Changing this
     * updates the `name` of an existing firewall.
     */
    name?: pulumi.Input<string>;
    /**
     * Should this firewall not be associated with any routers
     * (must be "true" or "false" if provide - defaults to "false").
     * Conflicts with `associatedRouters`.
     */
    noRouters?: pulumi.Input<boolean>;
    /**
     * The policy resource id for the firewall. Changing
     * this updates the `policyId` of an existing firewall.
     */
    policyId?: pulumi.Input<string>;
    /**
     * The region in which to obtain the v1 networking client.
     * A networking client is needed to create a firewall. If omitted, the
     * `region` argument of the provider is used. Changing this creates a new
     * firewall.
     */
    region?: pulumi.Input<string>;
    /**
     * The owner of the floating IP. Required if admin wants
     * to create a firewall for another tenant. Changing this creates a new
     * firewall.
     */
    tenantId?: pulumi.Input<string>;
    /**
     * Map of additional options.
     */
    valueSpecs?: pulumi.Input<{
        [key: string]: any;
    }>;
}
/**
 * The set of arguments for constructing a Firewall resource.
 */
export interface FirewallArgs {
    /**
     * Administrative up/down status for the firewall
     * (must be "true" or "false" if provided - defaults to "true").
     * Changing this updates the `adminStateUp` of an existing firewall.
     */
    adminStateUp?: pulumi.Input<boolean>;
    /**
     * Router(s) to associate this firewall instance
     * with. Must be a list of strings. Changing this updates the associated routers
     * of an existing firewall. Conflicts with `noRouters`.
     */
    associatedRouters?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A description for the firewall. Changing this
     * updates the `description` of an existing firewall.
     */
    description?: pulumi.Input<string>;
    /**
     * A name for the firewall. Changing this
     * updates the `name` of an existing firewall.
     */
    name?: pulumi.Input<string>;
    /**
     * Should this firewall not be associated with any routers
     * (must be "true" or "false" if provide - defaults to "false").
     * Conflicts with `associatedRouters`.
     */
    noRouters?: pulumi.Input<boolean>;
    /**
     * The policy resource id for the firewall. Changing
     * this updates the `policyId` of an existing firewall.
     */
    policyId: pulumi.Input<string>;
    /**
     * The region in which to obtain the v1 networking client.
     * A networking client is needed to create a firewall. If omitted, the
     * `region` argument of the provider is used. Changing this creates a new
     * firewall.
     */
    region?: pulumi.Input<string>;
    /**
     * The owner of the floating IP. Required if admin wants
     * to create a firewall for another tenant. Changing this creates a new
     * firewall.
     */
    tenantId?: pulumi.Input<string>;
    /**
     * Map of additional options.
     */
    valueSpecs?: pulumi.Input<{
        [key: string]: any;
    }>;
}
