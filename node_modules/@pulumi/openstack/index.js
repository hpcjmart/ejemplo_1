"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.vpnaas = exports.types = exports.sharedfilesystem = exports.orchestration = exports.objectstorage = exports.networking = exports.loadbalancer = exports.keymanager = exports.images = exports.identity = exports.firewall = exports.dns = exports.database = exports.containerinfra = exports.config = exports.compute = exports.blockstorage = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
// Export members:
__exportStar(require("./provider"), exports);
// Export sub-modules:
const blockstorage = require("./blockstorage");
exports.blockstorage = blockstorage;
const compute = require("./compute");
exports.compute = compute;
const config = require("./config");
exports.config = config;
const containerinfra = require("./containerinfra");
exports.containerinfra = containerinfra;
const database = require("./database");
exports.database = database;
const dns = require("./dns");
exports.dns = dns;
const firewall = require("./firewall");
exports.firewall = firewall;
const identity = require("./identity");
exports.identity = identity;
const images = require("./images");
exports.images = images;
const keymanager = require("./keymanager");
exports.keymanager = keymanager;
const loadbalancer = require("./loadbalancer");
exports.loadbalancer = loadbalancer;
const networking = require("./networking");
exports.networking = networking;
const objectstorage = require("./objectstorage");
exports.objectstorage = objectstorage;
const orchestration = require("./orchestration");
exports.orchestration = orchestration;
const sharedfilesystem = require("./sharedfilesystem");
exports.sharedfilesystem = sharedfilesystem;
const types = require("./types");
exports.types = types;
const vpnaas = require("./vpnaas");
exports.vpnaas = vpnaas;
const provider_1 = require("./provider");
pulumi.runtime.registerResourcePackage("openstack", {
    version: utilities.getVersion(),
    constructProvider: (name, type, urn) => {
        if (type !== "pulumi:providers:openstack") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new provider_1.Provider(name, undefined, { urn });
    },
});
//# sourceMappingURL=index.js.map