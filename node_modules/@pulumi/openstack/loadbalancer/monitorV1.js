"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.MonitorV1 = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a V1 load balancer monitor resource within OpenStack.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as openstack from "@pulumi/openstack";
 *
 * const monitor1 = new openstack.loadbalancer.MonitorV1("monitor_1", {
 *     adminStateUp: "true",
 *     delay: 30,
 *     maxRetries: 3,
 *     timeout: 5,
 *     type: "PING",
 * });
 * ```
 *
 * ## Import
 *
 * Load Balancer Members can be imported using the `id`, e.g.
 *
 * ```sh
 *  $ pulumi import openstack:loadbalancer/monitorV1:MonitorV1 monitor_1 119d7530-72e9-449a-aa97-124a5ef1992c
 * ```
 */
class MonitorV1 extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["adminStateUp"] = state ? state.adminStateUp : undefined;
            resourceInputs["delay"] = state ? state.delay : undefined;
            resourceInputs["expectedCodes"] = state ? state.expectedCodes : undefined;
            resourceInputs["httpMethod"] = state ? state.httpMethod : undefined;
            resourceInputs["maxRetries"] = state ? state.maxRetries : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
            resourceInputs["timeout"] = state ? state.timeout : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["urlPath"] = state ? state.urlPath : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.delay === undefined) && !opts.urn) {
                throw new Error("Missing required property 'delay'");
            }
            if ((!args || args.maxRetries === undefined) && !opts.urn) {
                throw new Error("Missing required property 'maxRetries'");
            }
            if ((!args || args.timeout === undefined) && !opts.urn) {
                throw new Error("Missing required property 'timeout'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["adminStateUp"] = args ? args.adminStateUp : undefined;
            resourceInputs["delay"] = args ? args.delay : undefined;
            resourceInputs["expectedCodes"] = args ? args.expectedCodes : undefined;
            resourceInputs["httpMethod"] = args ? args.httpMethod : undefined;
            resourceInputs["maxRetries"] = args ? args.maxRetries : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["tenantId"] = args ? args.tenantId : undefined;
            resourceInputs["timeout"] = args ? args.timeout : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["urlPath"] = args ? args.urlPath : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MonitorV1.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing MonitorV1 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new MonitorV1(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of MonitorV1.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MonitorV1.__pulumiType;
    }
}
exports.MonitorV1 = MonitorV1;
/** @internal */
MonitorV1.__pulumiType = 'openstack:loadbalancer/monitorV1:MonitorV1';
//# sourceMappingURL=monitorV1.js.map