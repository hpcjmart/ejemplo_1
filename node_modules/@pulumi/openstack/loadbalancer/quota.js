"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Quota = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a V2 load balancer quota resource within OpenStack.
 *
 * > **Note:** This usually requires admin privileges.
 *
 * > **Note:** This resource is only available for Octavia.
 *
 * > **Note:** This resource has a no-op deletion so no actual actions will be done against the OpenStack
 *    API in case of delete call.
 *
 * > **Note:** This resource has all-in creation so all optional quota arguments that were not specified are
 *    created with zero value.
 *
 * > **Note:** This resource has attributes that depend on octavia minor versions.
 * Please ensure your Openstack cloud supports the required minor version.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as openstack from "@pulumi/openstack";
 *
 * const project1 = new openstack.identity.Project("project_1", {});
 * const quota1 = new openstack.loadbalancer.Quota("quota_1", {
 *     healthMonitor: 10,
 *     l7Policy: 11,
 *     l7Rule: 12,
 *     listener: 7,
 *     loadbalancer: 6,
 *     member: 8,
 *     pool: 9,
 *     projectId: project1.id,
 * });
 * ```
 *
 * ## Import
 *
 * Quotas can be imported using the `project_id/region_name`, where region_name is the one defined is the Openstack credentials that are in use. E.g.
 *
 * ```sh
 *  $ pulumi import openstack:loadbalancer/quota:Quota quota_1 2a0f2240-c5e6-41de-896d-e80d97428d6b/region_1
 * ```
 */
class Quota extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["healthMonitor"] = state ? state.healthMonitor : undefined;
            resourceInputs["l7Policy"] = state ? state.l7Policy : undefined;
            resourceInputs["l7Rule"] = state ? state.l7Rule : undefined;
            resourceInputs["listener"] = state ? state.listener : undefined;
            resourceInputs["loadbalancer"] = state ? state.loadbalancer : undefined;
            resourceInputs["member"] = state ? state.member : undefined;
            resourceInputs["pool"] = state ? state.pool : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            resourceInputs["healthMonitor"] = args ? args.healthMonitor : undefined;
            resourceInputs["l7Policy"] = args ? args.l7Policy : undefined;
            resourceInputs["l7Rule"] = args ? args.l7Rule : undefined;
            resourceInputs["listener"] = args ? args.listener : undefined;
            resourceInputs["loadbalancer"] = args ? args.loadbalancer : undefined;
            resourceInputs["member"] = args ? args.member : undefined;
            resourceInputs["pool"] = args ? args.pool : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Quota.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing Quota resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Quota(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Quota.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Quota.__pulumiType;
    }
}
exports.Quota = Quota;
/** @internal */
Quota.__pulumiType = 'openstack:loadbalancer/quota:Quota';
//# sourceMappingURL=quota.js.map