"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
// Export members:
__exportStar(require("./l7policyV2"), exports);
__exportStar(require("./l7ruleV2"), exports);
__exportStar(require("./listener"), exports);
__exportStar(require("./loadBalancer"), exports);
__exportStar(require("./member"), exports);
__exportStar(require("./memberV1"), exports);
__exportStar(require("./members"), exports);
__exportStar(require("./monitor"), exports);
__exportStar(require("./monitorV1"), exports);
__exportStar(require("./pool"), exports);
__exportStar(require("./poolV1"), exports);
__exportStar(require("./quota"), exports);
__exportStar(require("./vip"), exports);
// Import resources to register:
const l7policyV2_1 = require("./l7policyV2");
const l7ruleV2_1 = require("./l7ruleV2");
const listener_1 = require("./listener");
const loadBalancer_1 = require("./loadBalancer");
const member_1 = require("./member");
const memberV1_1 = require("./memberV1");
const members_1 = require("./members");
const monitor_1 = require("./monitor");
const monitorV1_1 = require("./monitorV1");
const pool_1 = require("./pool");
const poolV1_1 = require("./poolV1");
const quota_1 = require("./quota");
const vip_1 = require("./vip");
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "openstack:loadbalancer/l7PolicyV2:L7PolicyV2":
                return new l7policyV2_1.L7PolicyV2(name, undefined, { urn });
            case "openstack:loadbalancer/l7RuleV2:L7RuleV2":
                return new l7ruleV2_1.L7RuleV2(name, undefined, { urn });
            case "openstack:loadbalancer/listener:Listener":
                return new listener_1.Listener(name, undefined, { urn });
            case "openstack:loadbalancer/loadBalancer:LoadBalancer":
                return new loadBalancer_1.LoadBalancer(name, undefined, { urn });
            case "openstack:loadbalancer/member:Member":
                return new member_1.Member(name, undefined, { urn });
            case "openstack:loadbalancer/memberV1:MemberV1":
                return new memberV1_1.MemberV1(name, undefined, { urn });
            case "openstack:loadbalancer/members:Members":
                return new members_1.Members(name, undefined, { urn });
            case "openstack:loadbalancer/monitor:Monitor":
                return new monitor_1.Monitor(name, undefined, { urn });
            case "openstack:loadbalancer/monitorV1:MonitorV1":
                return new monitorV1_1.MonitorV1(name, undefined, { urn });
            case "openstack:loadbalancer/pool:Pool":
                return new pool_1.Pool(name, undefined, { urn });
            case "openstack:loadbalancer/poolV1:PoolV1":
                return new poolV1_1.PoolV1(name, undefined, { urn });
            case "openstack:loadbalancer/quota:Quota":
                return new quota_1.Quota(name, undefined, { urn });
            case "openstack:loadbalancer/vip:Vip":
                return new vip_1.Vip(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("openstack", "loadbalancer/l7PolicyV2", _module);
pulumi.runtime.registerResourceModule("openstack", "loadbalancer/l7RuleV2", _module);
pulumi.runtime.registerResourceModule("openstack", "loadbalancer/listener", _module);
pulumi.runtime.registerResourceModule("openstack", "loadbalancer/loadBalancer", _module);
pulumi.runtime.registerResourceModule("openstack", "loadbalancer/member", _module);
pulumi.runtime.registerResourceModule("openstack", "loadbalancer/memberV1", _module);
pulumi.runtime.registerResourceModule("openstack", "loadbalancer/members", _module);
pulumi.runtime.registerResourceModule("openstack", "loadbalancer/monitor", _module);
pulumi.runtime.registerResourceModule("openstack", "loadbalancer/monitorV1", _module);
pulumi.runtime.registerResourceModule("openstack", "loadbalancer/pool", _module);
pulumi.runtime.registerResourceModule("openstack", "loadbalancer/poolV1", _module);
pulumi.runtime.registerResourceModule("openstack", "loadbalancer/quota", _module);
pulumi.runtime.registerResourceModule("openstack", "loadbalancer/vip", _module);
//# sourceMappingURL=index.js.map