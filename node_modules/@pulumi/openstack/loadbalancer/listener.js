"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Listener = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a V2 listener resource within OpenStack.
 *
 * > **Note:** This resource has attributes that depend on octavia minor versions.
 * Please ensure your Openstack cloud supports the required minor version.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as openstack from "@pulumi/openstack";
 *
 * const listener1 = new openstack.loadbalancer.Listener("listener_1", {
 *     insertHeaders: {
 *         "X-Forwarded-For": "true",
 *     },
 *     loadbalancerId: "d9415786-5f1a-428b-b35f-2f1523e146d2",
 *     protocol: "HTTP",
 *     protocolPort: 8080,
 * });
 * ```
 *
 * ## Import
 *
 * Load Balancer Listener can be imported using the Listener ID, e.g.
 *
 * ```sh
 *  $ pulumi import openstack:loadbalancer/listener:Listener listener_1 b67ce64e-8b26-405d-afeb-4a078901f15a
 * ```
 */
class Listener extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["adminStateUp"] = state ? state.adminStateUp : undefined;
            resourceInputs["allowedCidrs"] = state ? state.allowedCidrs : undefined;
            resourceInputs["connectionLimit"] = state ? state.connectionLimit : undefined;
            resourceInputs["defaultPoolId"] = state ? state.defaultPoolId : undefined;
            resourceInputs["defaultTlsContainerRef"] = state ? state.defaultTlsContainerRef : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["insertHeaders"] = state ? state.insertHeaders : undefined;
            resourceInputs["loadbalancerId"] = state ? state.loadbalancerId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["protocolPort"] = state ? state.protocolPort : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["sniContainerRefs"] = state ? state.sniContainerRefs : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
            resourceInputs["timeoutClientData"] = state ? state.timeoutClientData : undefined;
            resourceInputs["timeoutMemberConnect"] = state ? state.timeoutMemberConnect : undefined;
            resourceInputs["timeoutMemberData"] = state ? state.timeoutMemberData : undefined;
            resourceInputs["timeoutTcpInspect"] = state ? state.timeoutTcpInspect : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.loadbalancerId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'loadbalancerId'");
            }
            if ((!args || args.protocol === undefined) && !opts.urn) {
                throw new Error("Missing required property 'protocol'");
            }
            if ((!args || args.protocolPort === undefined) && !opts.urn) {
                throw new Error("Missing required property 'protocolPort'");
            }
            resourceInputs["adminStateUp"] = args ? args.adminStateUp : undefined;
            resourceInputs["allowedCidrs"] = args ? args.allowedCidrs : undefined;
            resourceInputs["connectionLimit"] = args ? args.connectionLimit : undefined;
            resourceInputs["defaultPoolId"] = args ? args.defaultPoolId : undefined;
            resourceInputs["defaultTlsContainerRef"] = args ? args.defaultTlsContainerRef : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["insertHeaders"] = args ? args.insertHeaders : undefined;
            resourceInputs["loadbalancerId"] = args ? args.loadbalancerId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["protocolPort"] = args ? args.protocolPort : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["sniContainerRefs"] = args ? args.sniContainerRefs : undefined;
            resourceInputs["tenantId"] = args ? args.tenantId : undefined;
            resourceInputs["timeoutClientData"] = args ? args.timeoutClientData : undefined;
            resourceInputs["timeoutMemberConnect"] = args ? args.timeoutMemberConnect : undefined;
            resourceInputs["timeoutMemberData"] = args ? args.timeoutMemberData : undefined;
            resourceInputs["timeoutTcpInspect"] = args ? args.timeoutTcpInspect : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Listener.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing Listener resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Listener(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Listener.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Listener.__pulumiType;
    }
}
exports.Listener = Listener;
/** @internal */
Listener.__pulumiType = 'openstack:loadbalancer/listener:Listener';
//# sourceMappingURL=listener.js.map