import * as pulumi from "@pulumi/pulumi";
/**
 * Use this data source to get the ID of an available OpenStack flavor.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as openstack from "@pulumi/openstack";
 *
 * const small = pulumi.output(openstack.compute.getFlavor({
 *     ram: 512,
 *     vcpus: 1,
 * }));
 * ```
 */
export declare function getFlavor(args?: GetFlavorArgs, opts?: pulumi.InvokeOptions): Promise<GetFlavorResult>;
/**
 * A collection of arguments for invoking getFlavor.
 */
export interface GetFlavorArgs {
    /**
     * The exact amount of disk (in gigabytes).
     */
    disk?: number;
    /**
     * The ID of the flavor. Conflicts with the `name`,
     * `minRam` and `minDisk`
     */
    flavorId?: string;
    /**
     * The flavor visibility.
     */
    isPublic?: boolean;
    /**
     * The minimum amount of disk (in gigabytes). Conflicts
     * with the `flavorId`.
     */
    minDisk?: number;
    /**
     * The minimum amount of RAM (in megabytes). Conflicts
     * with the `flavorId`.
     */
    minRam?: number;
    /**
     * The name of the flavor. Conflicts with the `flavorId`.
     */
    name?: string;
    /**
     * The exact amount of RAM (in megabytes).
     */
    ram?: number;
    /**
     * The region in which to obtain the V2 Compute client.
     * If omitted, the `region` argument of the provider is used.
     */
    region?: string;
    /**
     * The `rxTxFactor` of the flavor.
     */
    rxTxFactor?: number;
    /**
     * The amount of swap (in gigabytes).
     */
    swap?: number;
    /**
     * The amount of VCPUs.
     */
    vcpus?: number;
}
/**
 * A collection of values returned by getFlavor.
 */
export interface GetFlavorResult {
    readonly disk?: number;
    /**
     * Key/Value pairs of metadata for the flavor.
     */
    readonly extraSpecs: {
        [key: string]: any;
    };
    readonly flavorId?: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly isPublic?: boolean;
    readonly minDisk?: number;
    readonly minRam?: number;
    readonly name?: string;
    readonly ram?: number;
    readonly region: string;
    readonly rxTxFactor?: number;
    readonly swap?: number;
    readonly vcpus?: number;
}
export declare function getFlavorOutput(args?: GetFlavorOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetFlavorResult>;
/**
 * A collection of arguments for invoking getFlavor.
 */
export interface GetFlavorOutputArgs {
    /**
     * The exact amount of disk (in gigabytes).
     */
    disk?: pulumi.Input<number>;
    /**
     * The ID of the flavor. Conflicts with the `name`,
     * `minRam` and `minDisk`
     */
    flavorId?: pulumi.Input<string>;
    /**
     * The flavor visibility.
     */
    isPublic?: pulumi.Input<boolean>;
    /**
     * The minimum amount of disk (in gigabytes). Conflicts
     * with the `flavorId`.
     */
    minDisk?: pulumi.Input<number>;
    /**
     * The minimum amount of RAM (in megabytes). Conflicts
     * with the `flavorId`.
     */
    minRam?: pulumi.Input<number>;
    /**
     * The name of the flavor. Conflicts with the `flavorId`.
     */
    name?: pulumi.Input<string>;
    /**
     * The exact amount of RAM (in megabytes).
     */
    ram?: pulumi.Input<number>;
    /**
     * The region in which to obtain the V2 Compute client.
     * If omitted, the `region` argument of the provider is used.
     */
    region?: pulumi.Input<string>;
    /**
     * The `rxTxFactor` of the flavor.
     */
    rxTxFactor?: pulumi.Input<number>;
    /**
     * The amount of swap (in gigabytes).
     */
    swap?: pulumi.Input<number>;
    /**
     * The amount of VCPUs.
     */
    vcpus?: pulumi.Input<number>;
}
