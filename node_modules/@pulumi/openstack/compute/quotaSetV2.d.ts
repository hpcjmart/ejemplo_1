import * as pulumi from "@pulumi/pulumi";
/**
 * Manages a V2 compute quotaset resource within OpenStack.
 *
 * > **Note:** This usually requires admin privileges.
 *
 * > **Note:** This resource has a no-op deletion so no actual actions will be done against the OpenStack API
 *     in case of delete call.
 *
 * > **Note:** This resource has all-in creation so all optional quota arguments that were not specified are
 *     created with zero value.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as openstack from "@pulumi/openstack";
 *
 * const project1 = new openstack.identity.Project("project1", {});
 * const quotaset1 = new openstack.compute.QuotaSetV2("quotaset1", {
 *     projectId: project1.id,
 *     keyPairs: 10,
 *     ram: 40960,
 *     cores: 32,
 *     instances: 20,
 *     serverGroups: 4,
 *     serverGroupMembers: 8,
 * });
 * ```
 *
 * ## Import
 *
 * Quotasets can be imported using the `project_id/region_name`, e.g.
 *
 * ```sh
 *  $ pulumi import openstack:compute/quotaSetV2:QuotaSetV2 quotaset_1 2a0f2240-c5e6-41de-896d-e80d97428d6b/region_1
 * ```
 */
export declare class QuotaSetV2 extends pulumi.CustomResource {
    /**
     * Get an existing QuotaSetV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: QuotaSetV2State, opts?: pulumi.CustomResourceOptions): QuotaSetV2;
    /**
     * Returns true if the given object is an instance of QuotaSetV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is QuotaSetV2;
    /**
     * Quota value for cores.
     * Changing this updates the existing quotaset.
     */
    readonly cores: pulumi.Output<number>;
    /**
     * Quota value for fixed IPs.
     * Changing this updates the existing quotaset.
     */
    readonly fixedIps: pulumi.Output<number>;
    /**
     * Quota value for floating IPs.
     * Changing this updates the existing quotaset.
     */
    readonly floatingIps: pulumi.Output<number>;
    /**
     * Quota value for content bytes
     * of injected files. Changing this updates the existing quotaset.
     */
    readonly injectedFileContentBytes: pulumi.Output<number>;
    /**
     * Quota value for path bytes of
     * injected files. Changing this updates the existing quotaset.
     */
    readonly injectedFilePathBytes: pulumi.Output<number>;
    /**
     * Quota value for injected files.
     * Changing this updates the existing quotaset.
     */
    readonly injectedFiles: pulumi.Output<number>;
    /**
     * Quota value for instances.
     * Changing this updates the existing quotaset.
     */
    readonly instances: pulumi.Output<number>;
    /**
     * Quota value for key pairs.
     * Changing this updates the existing quotaset.
     */
    readonly keyPairs: pulumi.Output<number>;
    /**
     * Quota value for metadata items.
     * Changing this updates the existing quotaset.
     */
    readonly metadataItems: pulumi.Output<number>;
    /**
     * ID of the project to manage quotas.
     * Changing this creates a new quotaset.
     */
    readonly projectId: pulumi.Output<string>;
    /**
     * Quota value for RAM.
     * Changing this updates the existing quotaset.
     */
    readonly ram: pulumi.Output<number>;
    /**
     * The region in which to create the volume. If
     * omitted, the `region` argument of the provider is used. Changing this
     * creates a new quotaset.
     */
    readonly region: pulumi.Output<string>;
    /**
     * Quota value for security group rules.
     * Changing this updates the existing quotaset.
     */
    readonly securityGroupRules: pulumi.Output<number>;
    /**
     * Quota value for security groups.
     * Changing this updates the existing quotaset.
     */
    readonly securityGroups: pulumi.Output<number>;
    /**
     * Quota value for server groups members.
     * Changing this updates the existing quotaset.
     */
    readonly serverGroupMembers: pulumi.Output<number>;
    /**
     * Quota value for server groups.
     * Changing this updates the existing quotaset.
     */
    readonly serverGroups: pulumi.Output<number>;
    /**
     * Create a QuotaSetV2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: QuotaSetV2Args, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering QuotaSetV2 resources.
 */
export interface QuotaSetV2State {
    /**
     * Quota value for cores.
     * Changing this updates the existing quotaset.
     */
    cores?: pulumi.Input<number>;
    /**
     * Quota value for fixed IPs.
     * Changing this updates the existing quotaset.
     */
    fixedIps?: pulumi.Input<number>;
    /**
     * Quota value for floating IPs.
     * Changing this updates the existing quotaset.
     */
    floatingIps?: pulumi.Input<number>;
    /**
     * Quota value for content bytes
     * of injected files. Changing this updates the existing quotaset.
     */
    injectedFileContentBytes?: pulumi.Input<number>;
    /**
     * Quota value for path bytes of
     * injected files. Changing this updates the existing quotaset.
     */
    injectedFilePathBytes?: pulumi.Input<number>;
    /**
     * Quota value for injected files.
     * Changing this updates the existing quotaset.
     */
    injectedFiles?: pulumi.Input<number>;
    /**
     * Quota value for instances.
     * Changing this updates the existing quotaset.
     */
    instances?: pulumi.Input<number>;
    /**
     * Quota value for key pairs.
     * Changing this updates the existing quotaset.
     */
    keyPairs?: pulumi.Input<number>;
    /**
     * Quota value for metadata items.
     * Changing this updates the existing quotaset.
     */
    metadataItems?: pulumi.Input<number>;
    /**
     * ID of the project to manage quotas.
     * Changing this creates a new quotaset.
     */
    projectId?: pulumi.Input<string>;
    /**
     * Quota value for RAM.
     * Changing this updates the existing quotaset.
     */
    ram?: pulumi.Input<number>;
    /**
     * The region in which to create the volume. If
     * omitted, the `region` argument of the provider is used. Changing this
     * creates a new quotaset.
     */
    region?: pulumi.Input<string>;
    /**
     * Quota value for security group rules.
     * Changing this updates the existing quotaset.
     */
    securityGroupRules?: pulumi.Input<number>;
    /**
     * Quota value for security groups.
     * Changing this updates the existing quotaset.
     */
    securityGroups?: pulumi.Input<number>;
    /**
     * Quota value for server groups members.
     * Changing this updates the existing quotaset.
     */
    serverGroupMembers?: pulumi.Input<number>;
    /**
     * Quota value for server groups.
     * Changing this updates the existing quotaset.
     */
    serverGroups?: pulumi.Input<number>;
}
/**
 * The set of arguments for constructing a QuotaSetV2 resource.
 */
export interface QuotaSetV2Args {
    /**
     * Quota value for cores.
     * Changing this updates the existing quotaset.
     */
    cores?: pulumi.Input<number>;
    /**
     * Quota value for fixed IPs.
     * Changing this updates the existing quotaset.
     */
    fixedIps?: pulumi.Input<number>;
    /**
     * Quota value for floating IPs.
     * Changing this updates the existing quotaset.
     */
    floatingIps?: pulumi.Input<number>;
    /**
     * Quota value for content bytes
     * of injected files. Changing this updates the existing quotaset.
     */
    injectedFileContentBytes?: pulumi.Input<number>;
    /**
     * Quota value for path bytes of
     * injected files. Changing this updates the existing quotaset.
     */
    injectedFilePathBytes?: pulumi.Input<number>;
    /**
     * Quota value for injected files.
     * Changing this updates the existing quotaset.
     */
    injectedFiles?: pulumi.Input<number>;
    /**
     * Quota value for instances.
     * Changing this updates the existing quotaset.
     */
    instances?: pulumi.Input<number>;
    /**
     * Quota value for key pairs.
     * Changing this updates the existing quotaset.
     */
    keyPairs?: pulumi.Input<number>;
    /**
     * Quota value for metadata items.
     * Changing this updates the existing quotaset.
     */
    metadataItems?: pulumi.Input<number>;
    /**
     * ID of the project to manage quotas.
     * Changing this creates a new quotaset.
     */
    projectId: pulumi.Input<string>;
    /**
     * Quota value for RAM.
     * Changing this updates the existing quotaset.
     */
    ram?: pulumi.Input<number>;
    /**
     * The region in which to create the volume. If
     * omitted, the `region` argument of the provider is used. Changing this
     * creates a new quotaset.
     */
    region?: pulumi.Input<string>;
    /**
     * Quota value for security group rules.
     * Changing this updates the existing quotaset.
     */
    securityGroupRules?: pulumi.Input<number>;
    /**
     * Quota value for security groups.
     * Changing this updates the existing quotaset.
     */
    securityGroups?: pulumi.Input<number>;
    /**
     * Quota value for server groups members.
     * Changing this updates the existing quotaset.
     */
    serverGroupMembers?: pulumi.Input<number>;
    /**
     * Quota value for server groups.
     * Changing this updates the existing quotaset.
     */
    serverGroups?: pulumi.Input<number>;
}
