"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Instance = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
class Instance extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["accessIpV4"] = state ? state.accessIpV4 : undefined;
            resourceInputs["accessIpV6"] = state ? state.accessIpV6 : undefined;
            resourceInputs["adminPass"] = state ? state.adminPass : undefined;
            resourceInputs["allMetadata"] = state ? state.allMetadata : undefined;
            resourceInputs["allTags"] = state ? state.allTags : undefined;
            resourceInputs["availabilityZone"] = state ? state.availabilityZone : undefined;
            resourceInputs["availabilityZoneHints"] = state ? state.availabilityZoneHints : undefined;
            resourceInputs["blockDevices"] = state ? state.blockDevices : undefined;
            resourceInputs["configDrive"] = state ? state.configDrive : undefined;
            resourceInputs["flavorId"] = state ? state.flavorId : undefined;
            resourceInputs["flavorName"] = state ? state.flavorName : undefined;
            resourceInputs["floatingIp"] = state ? state.floatingIp : undefined;
            resourceInputs["forceDelete"] = state ? state.forceDelete : undefined;
            resourceInputs["imageId"] = state ? state.imageId : undefined;
            resourceInputs["imageName"] = state ? state.imageName : undefined;
            resourceInputs["keyPair"] = state ? state.keyPair : undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkMode"] = state ? state.networkMode : undefined;
            resourceInputs["networks"] = state ? state.networks : undefined;
            resourceInputs["personalities"] = state ? state.personalities : undefined;
            resourceInputs["powerState"] = state ? state.powerState : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["schedulerHints"] = state ? state.schedulerHints : undefined;
            resourceInputs["securityGroups"] = state ? state.securityGroups : undefined;
            resourceInputs["stopBeforeDestroy"] = state ? state.stopBeforeDestroy : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["userData"] = state ? state.userData : undefined;
            resourceInputs["vendorOptions"] = state ? state.vendorOptions : undefined;
            resourceInputs["volumes"] = state ? state.volumes : undefined;
        }
        else {
            const args = argsOrState;
            resourceInputs["accessIpV4"] = args ? args.accessIpV4 : undefined;
            resourceInputs["accessIpV6"] = args ? args.accessIpV6 : undefined;
            resourceInputs["adminPass"] = args ? args.adminPass : undefined;
            resourceInputs["availabilityZone"] = args ? args.availabilityZone : undefined;
            resourceInputs["availabilityZoneHints"] = args ? args.availabilityZoneHints : undefined;
            resourceInputs["blockDevices"] = args ? args.blockDevices : undefined;
            resourceInputs["configDrive"] = args ? args.configDrive : undefined;
            resourceInputs["flavorId"] = args ? args.flavorId : undefined;
            resourceInputs["flavorName"] = args ? args.flavorName : undefined;
            resourceInputs["floatingIp"] = args ? args.floatingIp : undefined;
            resourceInputs["forceDelete"] = args ? args.forceDelete : undefined;
            resourceInputs["imageId"] = args ? args.imageId : undefined;
            resourceInputs["imageName"] = args ? args.imageName : undefined;
            resourceInputs["keyPair"] = args ? args.keyPair : undefined;
            resourceInputs["metadata"] = args ? args.metadata : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkMode"] = args ? args.networkMode : undefined;
            resourceInputs["networks"] = args ? args.networks : undefined;
            resourceInputs["personalities"] = args ? args.personalities : undefined;
            resourceInputs["powerState"] = args ? args.powerState : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["schedulerHints"] = args ? args.schedulerHints : undefined;
            resourceInputs["securityGroups"] = args ? args.securityGroups : undefined;
            resourceInputs["stopBeforeDestroy"] = args ? args.stopBeforeDestroy : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["userData"] = args ? args.userData : undefined;
            resourceInputs["vendorOptions"] = args ? args.vendorOptions : undefined;
            resourceInputs["volumes"] = args ? args.volumes : undefined;
            resourceInputs["allMetadata"] = undefined /*out*/;
            resourceInputs["allTags"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Instance.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing Instance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Instance(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Instance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Instance.__pulumiType;
    }
}
exports.Instance = Instance;
/** @internal */
Instance.__pulumiType = 'openstack:compute/instance:Instance';
//# sourceMappingURL=instance.js.map