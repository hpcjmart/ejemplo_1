"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.FloatingIpAssociate = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Associate a floating IP to an instance.
 *
 * ## Example Usage
 * ### Automatically detect the correct network
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as openstack from "@pulumi/openstack";
 *
 * const instance1 = new openstack.compute.Instance("instance_1", {
 *     flavorId: "3",
 *     imageId: "ad091b52-742f-469e-8f3c-fd81cadf0743",
 *     keyPair: "my_key_pair_name",
 *     securityGroups: ["default"],
 * });
 * const fip1FloatingIp = new openstack.networking.FloatingIp("fip_1", {
 *     pool: "my_pool",
 * });
 * const fip1FloatingIpAssociate = new openstack.compute.FloatingIpAssociate("fip_1", {
 *     floatingIp: fip1FloatingIp.address,
 *     instanceId: instance1.id,
 * });
 * ```
 * ### Explicitly set the network to attach to
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as openstack from "@pulumi/openstack";
 *
 * const instance1 = new openstack.compute.Instance("instance_1", {
 *     flavorId: "3",
 *     imageId: "ad091b52-742f-469e-8f3c-fd81cadf0743",
 *     keyPair: "my_key_pair_name",
 *     networks: [
 *         {
 *             name: "my_network",
 *         },
 *         {
 *             name: "default",
 *         },
 *     ],
 *     securityGroups: ["default"],
 * });
 * const fip1FloatingIp = new openstack.networking.FloatingIp("fip_1", {
 *     pool: "my_pool",
 * });
 * const fip1FloatingIpAssociate = new openstack.compute.FloatingIpAssociate("fip_1", {
 *     fixedIp: instance1.networks.apply(networks => networks[1].fixedIpV4!),
 *     floatingIp: fip1FloatingIp.address,
 *     instanceId: instance1.id,
 * });
 * ```
 *
 * ## Import
 *
 * This resource can be imported by specifying all three arguments, separated by a forward slash
 *
 * ```sh
 *  $ pulumi import openstack:compute/floatingIpAssociate:FloatingIpAssociate fip_1 <floating_ip>/<instance_id>/<fixed_ip>
 * ```
 */
class FloatingIpAssociate extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["fixedIp"] = state ? state.fixedIp : undefined;
            resourceInputs["floatingIp"] = state ? state.floatingIp : undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["waitUntilAssociated"] = state ? state.waitUntilAssociated : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.floatingIp === undefined) && !opts.urn) {
                throw new Error("Missing required property 'floatingIp'");
            }
            if ((!args || args.instanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            resourceInputs["fixedIp"] = args ? args.fixedIp : undefined;
            resourceInputs["floatingIp"] = args ? args.floatingIp : undefined;
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["waitUntilAssociated"] = args ? args.waitUntilAssociated : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FloatingIpAssociate.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing FloatingIpAssociate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new FloatingIpAssociate(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of FloatingIpAssociate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FloatingIpAssociate.__pulumiType;
    }
}
exports.FloatingIpAssociate = FloatingIpAssociate;
/** @internal */
FloatingIpAssociate.__pulumiType = 'openstack:compute/floatingIpAssociate:FloatingIpAssociate';
//# sourceMappingURL=floatingIpAssociate.js.map