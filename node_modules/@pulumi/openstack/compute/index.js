"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
// Export members:
__exportStar(require("./aggregateV2"), exports);
__exportStar(require("./flavor"), exports);
__exportStar(require("./flavorAccess"), exports);
__exportStar(require("./floatingIp"), exports);
__exportStar(require("./floatingIpAssociate"), exports);
__exportStar(require("./getAggregateV2"), exports);
__exportStar(require("./getAvailabilityZones"), exports);
__exportStar(require("./getFlavor"), exports);
__exportStar(require("./getHypervisorV2"), exports);
__exportStar(require("./getInstanceV2"), exports);
__exportStar(require("./getKeypair"), exports);
__exportStar(require("./getQuotaSetV2"), exports);
__exportStar(require("./instance"), exports);
__exportStar(require("./interfaceAttach"), exports);
__exportStar(require("./keypair"), exports);
__exportStar(require("./quotaSetV2"), exports);
__exportStar(require("./secGroup"), exports);
__exportStar(require("./serverGroup"), exports);
__exportStar(require("./volumeAttach"), exports);
// Import resources to register:
const aggregateV2_1 = require("./aggregateV2");
const flavor_1 = require("./flavor");
const flavorAccess_1 = require("./flavorAccess");
const floatingIp_1 = require("./floatingIp");
const floatingIpAssociate_1 = require("./floatingIpAssociate");
const instance_1 = require("./instance");
const interfaceAttach_1 = require("./interfaceAttach");
const keypair_1 = require("./keypair");
const quotaSetV2_1 = require("./quotaSetV2");
const secGroup_1 = require("./secGroup");
const serverGroup_1 = require("./serverGroup");
const volumeAttach_1 = require("./volumeAttach");
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "openstack:compute/aggregateV2:AggregateV2":
                return new aggregateV2_1.AggregateV2(name, undefined, { urn });
            case "openstack:compute/flavor:Flavor":
                return new flavor_1.Flavor(name, undefined, { urn });
            case "openstack:compute/flavorAccess:FlavorAccess":
                return new flavorAccess_1.FlavorAccess(name, undefined, { urn });
            case "openstack:compute/floatingIp:FloatingIp":
                return new floatingIp_1.FloatingIp(name, undefined, { urn });
            case "openstack:compute/floatingIpAssociate:FloatingIpAssociate":
                return new floatingIpAssociate_1.FloatingIpAssociate(name, undefined, { urn });
            case "openstack:compute/instance:Instance":
                return new instance_1.Instance(name, undefined, { urn });
            case "openstack:compute/interfaceAttach:InterfaceAttach":
                return new interfaceAttach_1.InterfaceAttach(name, undefined, { urn });
            case "openstack:compute/keypair:Keypair":
                return new keypair_1.Keypair(name, undefined, { urn });
            case "openstack:compute/quotaSetV2:QuotaSetV2":
                return new quotaSetV2_1.QuotaSetV2(name, undefined, { urn });
            case "openstack:compute/secGroup:SecGroup":
                return new secGroup_1.SecGroup(name, undefined, { urn });
            case "openstack:compute/serverGroup:ServerGroup":
                return new serverGroup_1.ServerGroup(name, undefined, { urn });
            case "openstack:compute/volumeAttach:VolumeAttach":
                return new volumeAttach_1.VolumeAttach(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("openstack", "compute/aggregateV2", _module);
pulumi.runtime.registerResourceModule("openstack", "compute/flavor", _module);
pulumi.runtime.registerResourceModule("openstack", "compute/flavorAccess", _module);
pulumi.runtime.registerResourceModule("openstack", "compute/floatingIp", _module);
pulumi.runtime.registerResourceModule("openstack", "compute/floatingIpAssociate", _module);
pulumi.runtime.registerResourceModule("openstack", "compute/instance", _module);
pulumi.runtime.registerResourceModule("openstack", "compute/interfaceAttach", _module);
pulumi.runtime.registerResourceModule("openstack", "compute/keypair", _module);
pulumi.runtime.registerResourceModule("openstack", "compute/quotaSetV2", _module);
pulumi.runtime.registerResourceModule("openstack", "compute/secGroup", _module);
pulumi.runtime.registerResourceModule("openstack", "compute/serverGroup", _module);
pulumi.runtime.registerResourceModule("openstack", "compute/volumeAttach", _module);
//# sourceMappingURL=index.js.map