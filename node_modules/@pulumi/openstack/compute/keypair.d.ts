import * as pulumi from "@pulumi/pulumi";
/**
 * ## Import
 *
 * Keypairs can be imported using the `name`, e.g.
 *
 * ```sh
 *  $ pulumi import openstack:compute/keypair:Keypair my-keypair test-keypair
 * ```
 */
export declare class Keypair extends pulumi.CustomResource {
    /**
     * Get an existing Keypair resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KeypairState, opts?: pulumi.CustomResourceOptions): Keypair;
    /**
     * Returns true if the given object is an instance of Keypair.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Keypair;
    /**
     * The fingerprint of the public key.
     */
    readonly fingerprint: pulumi.Output<string>;
    /**
     * A unique name for the keypair. Changing this creates a new
     * keypair.
     */
    readonly name: pulumi.Output<string>;
    /**
     * The generated private key when no public key is specified.
     */
    readonly privateKey: pulumi.Output<string>;
    /**
     * A pregenerated OpenSSH-formatted public key.
     * Changing this creates a new keypair. If a public key is not specified, then
     * a public/private key pair will be automatically generated. If a pair is
     * created, then destroying this resource means you will lose access to that
     * keypair forever.
     */
    readonly publicKey: pulumi.Output<string>;
    /**
     * The region in which to obtain the V2 Compute client.
     * Keypairs are associated with accounts, but a Compute client is needed to
     * create one. If omitted, the `region` argument of the provider is used.
     * Changing this creates a new keypair.
     */
    readonly region: pulumi.Output<string>;
    /**
     * Map of additional options.
     */
    readonly valueSpecs: pulumi.Output<{
        [key: string]: any;
    } | undefined>;
    /**
     * Create a Keypair resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: KeypairArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering Keypair resources.
 */
export interface KeypairState {
    /**
     * The fingerprint of the public key.
     */
    fingerprint?: pulumi.Input<string>;
    /**
     * A unique name for the keypair. Changing this creates a new
     * keypair.
     */
    name?: pulumi.Input<string>;
    /**
     * The generated private key when no public key is specified.
     */
    privateKey?: pulumi.Input<string>;
    /**
     * A pregenerated OpenSSH-formatted public key.
     * Changing this creates a new keypair. If a public key is not specified, then
     * a public/private key pair will be automatically generated. If a pair is
     * created, then destroying this resource means you will lose access to that
     * keypair forever.
     */
    publicKey?: pulumi.Input<string>;
    /**
     * The region in which to obtain the V2 Compute client.
     * Keypairs are associated with accounts, but a Compute client is needed to
     * create one. If omitted, the `region` argument of the provider is used.
     * Changing this creates a new keypair.
     */
    region?: pulumi.Input<string>;
    /**
     * Map of additional options.
     */
    valueSpecs?: pulumi.Input<{
        [key: string]: any;
    }>;
}
/**
 * The set of arguments for constructing a Keypair resource.
 */
export interface KeypairArgs {
    /**
     * A unique name for the keypair. Changing this creates a new
     * keypair.
     */
    name?: pulumi.Input<string>;
    /**
     * A pregenerated OpenSSH-formatted public key.
     * Changing this creates a new keypair. If a public key is not specified, then
     * a public/private key pair will be automatically generated. If a pair is
     * created, then destroying this resource means you will lose access to that
     * keypair forever.
     */
    publicKey?: pulumi.Input<string>;
    /**
     * The region in which to obtain the V2 Compute client.
     * Keypairs are associated with accounts, but a Compute client is needed to
     * create one. If omitted, the `region` argument of the provider is used.
     * Changing this creates a new keypair.
     */
    region?: pulumi.Input<string>;
    /**
     * Map of additional options.
     */
    valueSpecs?: pulumi.Input<{
        [key: string]: any;
    }>;
}
