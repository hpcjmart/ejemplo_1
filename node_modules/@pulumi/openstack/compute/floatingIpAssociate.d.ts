import * as pulumi from "@pulumi/pulumi";
/**
 * Associate a floating IP to an instance.
 *
 * ## Example Usage
 * ### Automatically detect the correct network
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as openstack from "@pulumi/openstack";
 *
 * const instance1 = new openstack.compute.Instance("instance_1", {
 *     flavorId: "3",
 *     imageId: "ad091b52-742f-469e-8f3c-fd81cadf0743",
 *     keyPair: "my_key_pair_name",
 *     securityGroups: ["default"],
 * });
 * const fip1FloatingIp = new openstack.networking.FloatingIp("fip_1", {
 *     pool: "my_pool",
 * });
 * const fip1FloatingIpAssociate = new openstack.compute.FloatingIpAssociate("fip_1", {
 *     floatingIp: fip1FloatingIp.address,
 *     instanceId: instance1.id,
 * });
 * ```
 * ### Explicitly set the network to attach to
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as openstack from "@pulumi/openstack";
 *
 * const instance1 = new openstack.compute.Instance("instance_1", {
 *     flavorId: "3",
 *     imageId: "ad091b52-742f-469e-8f3c-fd81cadf0743",
 *     keyPair: "my_key_pair_name",
 *     networks: [
 *         {
 *             name: "my_network",
 *         },
 *         {
 *             name: "default",
 *         },
 *     ],
 *     securityGroups: ["default"],
 * });
 * const fip1FloatingIp = new openstack.networking.FloatingIp("fip_1", {
 *     pool: "my_pool",
 * });
 * const fip1FloatingIpAssociate = new openstack.compute.FloatingIpAssociate("fip_1", {
 *     fixedIp: instance1.networks.apply(networks => networks[1].fixedIpV4!),
 *     floatingIp: fip1FloatingIp.address,
 *     instanceId: instance1.id,
 * });
 * ```
 *
 * ## Import
 *
 * This resource can be imported by specifying all three arguments, separated by a forward slash
 *
 * ```sh
 *  $ pulumi import openstack:compute/floatingIpAssociate:FloatingIpAssociate fip_1 <floating_ip>/<instance_id>/<fixed_ip>
 * ```
 */
export declare class FloatingIpAssociate extends pulumi.CustomResource {
    /**
     * Get an existing FloatingIpAssociate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FloatingIpAssociateState, opts?: pulumi.CustomResourceOptions): FloatingIpAssociate;
    /**
     * Returns true if the given object is an instance of FloatingIpAssociate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is FloatingIpAssociate;
    /**
     * The specific IP address to direct traffic to.
     */
    readonly fixedIp: pulumi.Output<string | undefined>;
    /**
     * The floating IP to associate.
     */
    readonly floatingIp: pulumi.Output<string>;
    /**
     * The instance to associte the floating IP with.
     */
    readonly instanceId: pulumi.Output<string>;
    /**
     * The region in which to obtain the V2 Compute client.
     * Keypairs are associated with accounts, but a Compute client is needed to
     * create one. If omitted, the `region` argument of the provider is used.
     * Changing this creates a new floatingip_associate.
     */
    readonly region: pulumi.Output<string>;
    readonly waitUntilAssociated: pulumi.Output<boolean | undefined>;
    /**
     * Create a FloatingIpAssociate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FloatingIpAssociateArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering FloatingIpAssociate resources.
 */
export interface FloatingIpAssociateState {
    /**
     * The specific IP address to direct traffic to.
     */
    fixedIp?: pulumi.Input<string>;
    /**
     * The floating IP to associate.
     */
    floatingIp?: pulumi.Input<string>;
    /**
     * The instance to associte the floating IP with.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * The region in which to obtain the V2 Compute client.
     * Keypairs are associated with accounts, but a Compute client is needed to
     * create one. If omitted, the `region` argument of the provider is used.
     * Changing this creates a new floatingip_associate.
     */
    region?: pulumi.Input<string>;
    waitUntilAssociated?: pulumi.Input<boolean>;
}
/**
 * The set of arguments for constructing a FloatingIpAssociate resource.
 */
export interface FloatingIpAssociateArgs {
    /**
     * The specific IP address to direct traffic to.
     */
    fixedIp?: pulumi.Input<string>;
    /**
     * The floating IP to associate.
     */
    floatingIp: pulumi.Input<string>;
    /**
     * The instance to associte the floating IP with.
     */
    instanceId: pulumi.Input<string>;
    /**
     * The region in which to obtain the V2 Compute client.
     * Keypairs are associated with accounts, but a Compute client is needed to
     * create one. If omitted, the `region` argument of the provider is used.
     * Changing this creates a new floatingip_associate.
     */
    region?: pulumi.Input<string>;
    waitUntilAssociated?: pulumi.Input<boolean>;
}
