"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.IkePolicy = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a V2 Neutron IKE policy resource within OpenStack.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as openstack from "@pulumi/openstack";
 *
 * const policy1 = new openstack.vpnaas.IkePolicy("policy_1", {});
 * ```
 *
 * ## Import
 *
 * Services can be imported using the `id`, e.g.
 *
 * ```sh
 *  $ pulumi import openstack:vpnaas/ikePolicy:IkePolicy policy_1 832cb7f3-59fe-40cf-8f64-8350ffc03272
 * ```
 */
class IkePolicy extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["authAlgorithm"] = state ? state.authAlgorithm : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["encryptionAlgorithm"] = state ? state.encryptionAlgorithm : undefined;
            resourceInputs["ikeVersion"] = state ? state.ikeVersion : undefined;
            resourceInputs["lifetimes"] = state ? state.lifetimes : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["pfs"] = state ? state.pfs : undefined;
            resourceInputs["phase1NegotiationMode"] = state ? state.phase1NegotiationMode : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
            resourceInputs["valueSpecs"] = state ? state.valueSpecs : undefined;
        }
        else {
            const args = argsOrState;
            resourceInputs["authAlgorithm"] = args ? args.authAlgorithm : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["encryptionAlgorithm"] = args ? args.encryptionAlgorithm : undefined;
            resourceInputs["ikeVersion"] = args ? args.ikeVersion : undefined;
            resourceInputs["lifetimes"] = args ? args.lifetimes : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["pfs"] = args ? args.pfs : undefined;
            resourceInputs["phase1NegotiationMode"] = args ? args.phase1NegotiationMode : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["tenantId"] = args ? args.tenantId : undefined;
            resourceInputs["valueSpecs"] = args ? args.valueSpecs : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IkePolicy.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing IkePolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new IkePolicy(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of IkePolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IkePolicy.__pulumiType;
    }
}
exports.IkePolicy = IkePolicy;
/** @internal */
IkePolicy.__pulumiType = 'openstack:vpnaas/ikePolicy:IkePolicy';
//# sourceMappingURL=ikePolicy.js.map